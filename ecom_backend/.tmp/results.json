{
  "stats": {
    "suites": 83,
    "tests": 178,
    "passes": 178,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-06T18:01:45.285Z",
    "end": "2025-04-06T18:01:46.312Z",
    "duration": 1027,
    "testsRegistered": 178,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "48989f9a-f65b-4acd-84c8-747e83442acc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "295cc562-9abd-4510-9946-3e9ba43f0083",
          "title": "AdminController Blackbox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\AdminController.blackbox.test.mjs",
          "file": "\\test\\integration\\controller\\AdminController.blackbox.test.mjs",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"AdminController Blackbox Tests\"",
              "fullTitle": "AdminController Blackbox Tests \"after each\" hook in \"AdminController Blackbox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "b8ced2c0-175b-4414-be2c-a28d5f4c9fef",
              "parentUUID": "295cc562-9abd-4510-9946-3e9ba43f0083",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "859078ab-3dfe-406d-8217-5911885d289a",
              "title": "GET /admin/data",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\AdminController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\AdminController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 when the table query parameter is missing",
                  "fullTitle": "AdminController Blackbox Tests GET /admin/data should return 400 when the table query parameter is missing",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get(\"/admin/data\");\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal({ error: \"Invalid table name\" });",
                  "err": {},
                  "uuid": "1b22d294-41f6-4108-a03f-841f54161443",
                  "parentUUID": "859078ab-3dfe-406d-8217-5911885d289a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 when the table query parameter is invalid",
                  "fullTitle": "AdminController Blackbox Tests GET /admin/data should return 400 when the table query parameter is invalid",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get(\"/admin/data?table=NonExistingTable\");\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal({ error: \"Invalid table name\" });",
                  "err": {},
                  "uuid": "56cde80c-07ea-4cce-9365-c0c9b44e32f2",
                  "parentUUID": "859078ab-3dfe-406d-8217-5911885d289a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return admin data correctly when table parameter is \"Admin\"",
                  "fullTitle": "AdminController Blackbox Tests GET /admin/data should return admin data correctly when table parameter is \"Admin\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeRows = [{ user_id: 1, username: \"admin\" }];\nstub(db, \"query\").resolves([fakeRows]);\nconst res = await request(app).get(\"/admin/data?table=Admin\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(fakeRows);",
                  "err": {},
                  "uuid": "6b5aac1b-e287-4058-abfa-7d472b54fca1",
                  "parentUUID": "859078ab-3dfe-406d-8217-5911885d289a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return non-admin table data when a valid table parameter is provided",
                  "fullTitle": "AdminController Blackbox Tests GET /admin/data should return non-admin table data when a valid table parameter is provided",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeRows = [{ course_id: 101, course_name: \"Course 101\" }];\nstub(db, \"query\").resolves([fakeRows]);\nconst res = await request(app).get(\"/admin/data?table=Courses\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(fakeRows);",
                  "err": {},
                  "uuid": "02e9771f-4e15-41a6-ac50-7cc3f9ea15ef",
                  "parentUUID": "859078ab-3dfe-406d-8217-5911885d289a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if db.query throws an error",
                  "fullTitle": "AdminController Blackbox Tests GET /admin/data should return 500 if db.query throws an error",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(db, \"query\").rejects(new Error(\"Database error\"));\nconst res = await request(app).get(\"/admin/data?table=Courses\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Internal server error\" });",
                  "err": {},
                  "uuid": "d3b82d1b-fae4-4290-9f48-ec2db25f48d2",
                  "parentUUID": "859078ab-3dfe-406d-8217-5911885d289a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b22d294-41f6-4108-a03f-841f54161443",
                "56cde80c-07ea-4cce-9365-c0c9b44e32f2",
                "6b5aac1b-e287-4058-abfa-7d472b54fca1",
                "02e9771f-4e15-41a6-ac50-7cc3f9ea15ef",
                "d3b82d1b-fae4-4290-9f48-ec2db25f48d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 67,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39557a3c-8921-4198-aa26-30a2e03f206d",
              "title": "PUT /admin/data",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\AdminController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\AdminController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 when the table query parameter is missing",
                  "fullTitle": "AdminController Blackbox Tests PUT /admin/data should return 400 when the table query parameter is missing",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).put(\"/admin/data\").send({ data: [] });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal({ error: \"Invalid table name\" });",
                  "err": {},
                  "uuid": "904d7331-f7d7-402b-8c4b-45aff7d427be",
                  "parentUUID": "39557a3c-8921-4198-aa26-30a2e03f206d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 when data is missing or not an array",
                  "fullTitle": "AdminController Blackbox Tests PUT /admin/data should return 400 when data is missing or not an array",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .put(\"/admin/data?table=Courses\")\n  .send({ data: \"notAnArray\" });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal({\n  error: \"Invalid data format, expected an array\"\n});",
                  "err": {},
                  "uuid": "64f993e1-53c2-4525-9f6d-7fce840e2831",
                  "parentUUID": "39557a3c-8921-4198-aa26-30a2e03f206d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should process update requests correctly",
                  "fullTitle": "AdminController Blackbox Tests PUT /admin/data should process update requests correctly",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updateData = [\n  {\n    course_id: 101,\n    module_name: \"Updated Course Name\",\n    created_at: \"2023-04-01T12:00:00Z\"\n  }\n];\nconst dbQueryStub = stub(db, \"query\");\ndbQueryStub.onCall(0).resolves();\nconst fakeUpdatedRow = [{ course_id: 101, module_name: \"Updated Course Name\", created_at: \"2023-04-01 12:00:00\" }];\ndbQueryStub.onCall(1).resolves([fakeUpdatedRow]);\nconst res = await request(app)\n  .put(\"/admin/data?table=Courses\")\n  .send({ data: updateData });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Data updated successfully\" });",
                  "err": {},
                  "uuid": "b664d9e9-a0dc-43b0-afc1-c4f14e835bb7",
                  "parentUUID": "39557a3c-8921-4198-aa26-30a2e03f206d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if db.query throws an error during update",
                  "fullTitle": "AdminController Blackbox Tests PUT /admin/data should return 500 if db.query throws an error during update",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(db, \"query\").rejects(new Error(\"Database error\"));\nconst res = await request(app)\n  .put(\"/admin/data?table=Courses\")\n  .send({ data: [{ course_id: 101, module_name: \"Name\" }] });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Internal server error\" });",
                  "err": {},
                  "uuid": "3b7b14ec-9a5d-4ab3-840b-2dc081f486e9",
                  "parentUUID": "39557a3c-8921-4198-aa26-30a2e03f206d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "904d7331-f7d7-402b-8c4b-45aff7d427be",
                "64f993e1-53c2-4525-9f6d-7fce840e2831",
                "b664d9e9-a0dc-43b0-afc1-c4f14e835bb7",
                "3b7b14ec-9a5d-4ab3-840b-2dc081f486e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2873a6a0-c59d-46c7-8fce-3f3954105cd2",
          "title": "Certificate Controller Blackbox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CertificateController.blackbox.test.mjs",
          "file": "\\test\\integration\\controller\\CertificateController.blackbox.test.mjs",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Certificate Controller Blackbox Tests\"",
              "fullTitle": "Certificate Controller Blackbox Tests \"after each\" hook in \"Certificate Controller Blackbox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "e1f123a7-4240-404f-8a73-f0d86f78594d",
              "parentUUID": "2873a6a0-c59d-46c7-8fce-3f3954105cd2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if any required certificate data is missing",
              "fullTitle": "Certificate Controller Blackbox Tests should return 400 if any required certificate data is missing",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post(\"/certificate/email\")\n  .send({ email: \"user@example.com\", username: \"User\" });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal({ error: \"Missing required certificate data\" });",
              "err": {},
              "uuid": "de57f0f0-4a37-48d7-a8e4-36333b307dfc",
              "parentUUID": "2873a6a0-c59d-46c7-8fce-3f3954105cd2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should email certificate successfully",
              "fullTitle": "Certificate Controller Blackbox Tests should email certificate successfully",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dummyPdfBuffer = Buffer.from(\"dummy pdf\");\nconst dummyEmailResponse = { status: \"sent\" };\nstub(CertificateService, \"generateCertificatePdf\").resolves(dummyPdfBuffer);\nstub(GmailService, \"sendCertificateEmail\").resolves(dummyEmailResponse);\nconst certificatePayload = {\n  email: \"user@example.com\",\n  username: \"User\",\n  course: \"Course 101\",\n  date: \"2025-04-01\"\n};\nconst res = await request(app)\n  .post(\"/certificate/email\")\n  .send(certificatePayload);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({\n  message: \"Certificate emailed successfully\",\n  emailResponse: dummyEmailResponse\n});",
              "err": {},
              "uuid": "b77731d3-96f2-4e4f-9ac9-dd1e131e3edc",
              "parentUUID": "2873a6a0-c59d-46c7-8fce-3f3954105cd2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if an error occurs during certificate emailing",
              "fullTitle": "Certificate Controller Blackbox Tests should return 500 if an error occurs during certificate emailing",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "stub(CertificateService, \"generateCertificatePdf\").rejects(new Error(\"PDF error\"));\nconst certificatePayload = {\n  email: \"user@example.com\",\n  username: \"User\",\n  course: \"Course 101\",\n  date: \"2025-04-01\"\n};\nconst res = await request(app)\n  .post(\"/certificate/email\")\n  .send(certificatePayload);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Failed to email certificate\" });",
              "err": {},
              "uuid": "aff7493a-8ba8-4a92-8763-dc4b97b309bb",
              "parentUUID": "2873a6a0-c59d-46c7-8fce-3f3954105cd2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de57f0f0-4a37-48d7-a8e4-36333b307dfc",
            "b77731d3-96f2-4e4f-9ac9-dd1e131e3edc",
            "aff7493a-8ba8-4a92-8763-dc4b97b309bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4847f077-b6b9-46f9-afd6-1db81ae3ba24",
          "title": "Feedback Controller Blackbox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
          "file": "\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Feedback Controller Blackbox Tests\"",
              "fullTitle": "Feedback Controller Blackbox Tests \"after each\" hook in \"Feedback Controller Blackbox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "0ff2e870-3e4b-40c9-8520-7313dd98b4f5",
              "parentUUID": "4847f077-b6b9-46f9-afd6-1db81ae3ba24",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "780adba9-03e2-4a10-ba97-a5a744e53ff7",
              "title": "GET /contactusfeedback",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all feedback",
                  "fullTitle": "Feedback Controller Blackbox Tests GET /contactusfeedback should return all feedback",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyFeedback = [{ id: 1, comment: \"Great service!\" }];\nstub(FeedbackModel, \"getAll\").resolves(dummyFeedback);\nconst res = await request(app).get(\"/contactusfeedback\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(dummyFeedback);",
                  "err": {},
                  "uuid": "dfec77bc-ed1a-40a9-a308-2811b54965d7",
                  "parentUUID": "780adba9-03e2-4a10-ba97-a5a744e53ff7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if an error occurs",
                  "fullTitle": "Feedback Controller Blackbox Tests GET /contactusfeedback should return 500 if an error occurs",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(FeedbackModel, \"getAll\").rejects(new Error(\"DB error\"));\nconst res = await request(app).get(\"/contactusfeedback\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "f8e5230c-9170-4825-a7f6-ba10c6d2af8e",
                  "parentUUID": "780adba9-03e2-4a10-ba97-a5a744e53ff7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dfec77bc-ed1a-40a9-a308-2811b54965d7",
                "f8e5230c-9170-4825-a7f6-ba10c6d2af8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb56015e-689a-4da3-acf6-9f47e828dc40",
              "title": "GET /contactusfeedback/:id",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return feedback by id",
                  "fullTitle": "Feedback Controller Blackbox Tests GET /contactusfeedback/:id should return feedback by id",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyFeedback = { id: 1, comment: \"Excellent!\" };\nstub(FeedbackModel, \"getById\").resolves(dummyFeedback);\nconst res = await request(app).get(\"/contactusfeedback/1\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(dummyFeedback);",
                  "err": {},
                  "uuid": "ed311efd-17f7-4ff4-80b3-33711167f6fa",
                  "parentUUID": "cb56015e-689a-4da3-acf6-9f47e828dc40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if feedback is not found",
                  "fullTitle": "Feedback Controller Blackbox Tests GET /contactusfeedback/:id should return 404 if feedback is not found",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(FeedbackModel, \"getById\").resolves(null);\nconst res = await request(app).get(\"/contactusfeedback/999\");\nexpect(res.status).to.equal(404);\nexpect(res.body).to.deep.equal({ error: \"Feedback not found\" });",
                  "err": {},
                  "uuid": "da653fa3-bd17-4866-8513-76cfcff7cb23",
                  "parentUUID": "cb56015e-689a-4da3-acf6-9f47e828dc40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Feedback Controller Blackbox Tests GET /contactusfeedback/:id should return 500 on error",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(FeedbackModel, \"getById\").rejects(new Error(\"DB error\"));\nconst res = await request(app).get(\"/contactusfeedback/1\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "c4fe8b77-4209-44ff-adab-6f984b358093",
                  "parentUUID": "cb56015e-689a-4da3-acf6-9f47e828dc40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed311efd-17f7-4ff4-80b3-33711167f6fa",
                "da653fa3-bd17-4866-8513-76cfcff7cb23",
                "c4fe8b77-4209-44ff-adab-6f984b358093"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a0d5bfb1-3e94-4d49-9cc0-8848db53408e",
              "title": "POST /contactusfeedback",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create feedback successfully",
                  "fullTitle": "Feedback Controller Blackbox Tests POST /contactusfeedback should create feedback successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(FeedbackModel, \"create\").resolves(123);\nconst feedbackData = { comment: \"Loved it!\" };\nconst res = await request(app)\n  .post(\"/contactusfeedback\")\n  .send(feedbackData);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({\n  message: \"Feedback submitted successfully\",\n  feedbackId: 123,\n});",
                  "err": {},
                  "uuid": "b8540c93-b5b6-4631-b3fd-3b1a264142e3",
                  "parentUUID": "a0d5bfb1-3e94-4d49-9cc0-8848db53408e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Feedback Controller Blackbox Tests POST /contactusfeedback should return 500 on error",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(FeedbackModel, \"create\").rejects(new Error(\"DB error\"));\nconst feedbackData = { comment: \"Loved it!\" };\nconst res = await request(app)\n  .post(\"/contactusfeedback\")\n  .send(feedbackData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "c33e107d-8d67-44b9-bfcf-7a47aaec745a",
                  "parentUUID": "a0d5bfb1-3e94-4d49-9cc0-8848db53408e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8540c93-b5b6-4631-b3fd-3b1a264142e3",
                "c33e107d-8d67-44b9-bfcf-7a47aaec745a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "266c7ba0-3e32-4ebd-819c-86d2a479d583",
              "title": "PUT /contactusfeedback/:id",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update feedback successfully",
                  "fullTitle": "Feedback Controller Blackbox Tests PUT /contactusfeedback/:id should update feedback successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(FeedbackModel, \"update\").resolves();\nconst updateData = { comment: \"Updated comment\" };\nconst res = await request(app)\n  .put(\"/contactusfeedback/1\")\n  .send(updateData);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Feedback updated successfully\" });",
                  "err": {},
                  "uuid": "feefc68e-48c5-4386-994b-6ef92120c47b",
                  "parentUUID": "266c7ba0-3e32-4ebd-819c-86d2a479d583",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Feedback Controller Blackbox Tests PUT /contactusfeedback/:id should return 500 on error",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(FeedbackModel, \"update\").rejects(new Error(\"DB error\"));\nconst updateData = { comment: \"Updated comment\" };\nconst res = await request(app)\n  .put(\"/contactusfeedback/1\")\n  .send(updateData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "22e5dab1-d315-493d-b825-583c02a51443",
                  "parentUUID": "266c7ba0-3e32-4ebd-819c-86d2a479d583",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "feefc68e-48c5-4386-994b-6ef92120c47b",
                "22e5dab1-d315-493d-b825-583c02a51443"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6bb305be-3bed-44ab-9d65-6393c9feb85a",
              "title": "DELETE /contactusfeedback/:id",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\ContactFeedbackController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete feedback successfully",
                  "fullTitle": "Feedback Controller Blackbox Tests DELETE /contactusfeedback/:id should delete feedback successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(FeedbackModel, \"delete\").resolves();\nconst res = await request(app).delete(\"/contactusfeedback/1\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Feedback deleted successfully\" });",
                  "err": {},
                  "uuid": "1c1fafaf-bfc2-4b26-9082-ec5a1b9b14c0",
                  "parentUUID": "6bb305be-3bed-44ab-9d65-6393c9feb85a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Feedback Controller Blackbox Tests DELETE /contactusfeedback/:id should return 500 on error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(FeedbackModel, \"delete\").rejects(new Error(\"DB error\"));\nconst res = await request(app).delete(\"/contactusfeedback/1\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "cbf22490-63ff-470e-8acc-1bcde3098fb2",
                  "parentUUID": "6bb305be-3bed-44ab-9d65-6393c9feb85a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c1fafaf-bfc2-4b26-9082-ec5a1b9b14c0",
                "cbf22490-63ff-470e-8acc-1bcde3098fb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9a5dabd0-12f3-413e-8a82-ea56579a7c4d",
          "title": "Course Controller Blackbox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
          "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Course Controller Blackbox Tests\"",
              "fullTitle": "Course Controller Blackbox Tests \"after each\" hook in \"Course Controller Blackbox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "d8d1d1ce-2486-476f-87b9-96e97c7fb9bc",
              "parentUUID": "9a5dabd0-12f3-413e-8a82-ea56579a7c4d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c2280730-69a1-463b-b796-db38d0c3748a",
              "title": "GET /getAllCourses",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return courses filtered by keyword",
                  "fullTitle": "Course Controller Blackbox Tests GET /getAllCourses should return courses filtered by keyword",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyCourses = [{ course_id: 1, creator_id: 10, title: \"Test Course\" }];\nstub(CourseModel, \"getAll\").resolves(dummyCourses);\nconst res = await request(app).get(\"/getAllCourses?keyword=Test\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ data: dummyCourses });",
                  "err": {},
                  "uuid": "c84ecd17-2f63-4f1f-b7d4-90e5d9c54097",
                  "parentUUID": "c2280730-69a1-463b-b796-db38d0c3748a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests GET /getAllCourses should return 500 on error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"getAll\").rejects(new Error(\"DB error\"));\nconst res = await request(app).get(\"/getAllCourses\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "3b132f49-a2d7-4445-85b0-6f49744f0046",
                  "parentUUID": "c2280730-69a1-463b-b796-db38d0c3748a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c84ecd17-2f63-4f1f-b7d4-90e5d9c54097",
                "3b132f49-a2d7-4445-85b0-6f49744f0046"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "20e07722-0828-4664-89c2-1ed80da6aa04",
              "title": "GET /getCourse/:id",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return course data if found",
                  "fullTitle": "Course Controller Blackbox Tests GET /getCourse/:id should return course data if found",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyCourse = { course_id: 1, title: \"Test Course\" };\nstub(CourseModel, \"getById\").resolves(dummyCourse);\nconst res = await request(app).get(\"/getCourse/1\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ courseData: dummyCourse });",
                  "err": {},
                  "uuid": "af0d9497-d0a2-4eb3-8c67-779320bf2d08",
                  "parentUUID": "20e07722-0828-4664-89c2-1ed80da6aa04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if course not found",
                  "fullTitle": "Course Controller Blackbox Tests GET /getCourse/:id should return 404 if course not found",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"getById\").resolves(null);\nconst res = await request(app).get(\"/getCourse/999\");\nexpect(res.status).to.equal(404);\nexpect(res.body).to.deep.equal({ error: \"Course not found\" });",
                  "err": {},
                  "uuid": "002ebe2b-1c0c-42a1-85af-2b0db1fcc364",
                  "parentUUID": "20e07722-0828-4664-89c2-1ed80da6aa04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests GET /getCourse/:id should return 500 on error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"getById\").rejects(new Error(\"DB error\"));\nconst res = await request(app).get(\"/getCourse/1\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "6db8878e-f81f-41ba-be86-e32e05496145",
                  "parentUUID": "20e07722-0828-4664-89c2-1ed80da6aa04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af0d9497-d0a2-4eb3-8c67-779320bf2d08",
                "002ebe2b-1c0c-42a1-85af-2b0db1fcc364",
                "6db8878e-f81f-41ba-be86-e32e05496145"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d19007d9-d5d1-4c3e-b933-f7d6e4c43241",
              "title": "POST /createCourse",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a course successfully",
                  "fullTitle": "Course Controller Blackbox Tests POST /createCourse should create a course successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"create\").resolves({ course_id: 101, creator_id: 10 });\nconst courseData = { title: \"New Course\", description: \"Course description\" };\nconst res = await request(app)\n  .post(\"/createCourse\")\n  .send(courseData);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.deep.equal({\n  message: \"Course created successfully\",\n  data: { courseId: 101 }\n});",
                  "err": {},
                  "uuid": "467415c2-1a1b-4fea-b321-ccbd2fc2a893",
                  "parentUUID": "d19007d9-d5d1-4c3e-b933-f7d6e4c43241",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests POST /createCourse should return 500 on error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"create\").rejects(new Error(\"DB error\"));\nconst courseData = { title: \"New Course\" };\nconst res = await request(app)\n  .post(\"/createCourse\")\n  .send(courseData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "46bfebf5-c0d9-416e-bf1f-090996f02d33",
                  "parentUUID": "d19007d9-d5d1-4c3e-b933-f7d6e4c43241",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "467415c2-1a1b-4fea-b321-ccbd2fc2a893",
                "46bfebf5-c0d9-416e-bf1f-090996f02d33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ad7480f-b465-4c72-8483-2b560accf571",
              "title": "PUT /updateCourse/:id",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a course successfully",
                  "fullTitle": "Course Controller Blackbox Tests PUT /updateCourse/:id should update a course successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"update\").resolves();\nconst updateData = { title: \"Updated Course Title\" };\nconst res = await request(app)\n  .put(\"/updateCourse/1\")\n  .send(updateData);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Course updated successfully\" });",
                  "err": {},
                  "uuid": "4ed334bb-eaa4-45ed-bfb9-f3bce480379f",
                  "parentUUID": "4ad7480f-b465-4c72-8483-2b560accf571",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests PUT /updateCourse/:id should return 500 on error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"update\").rejects(new Error(\"DB error\"));\nconst updateData = { title: \"Updated Course Title\" };\nconst res = await request(app)\n  .put(\"/updateCourse/1\")\n  .send(updateData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "060804a4-ed4c-447e-917d-cb9b3c22869e",
                  "parentUUID": "4ad7480f-b465-4c72-8483-2b560accf571",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ed334bb-eaa4-45ed-bfb9-f3bce480379f",
                "060804a4-ed4c-447e-917d-cb9b3c22869e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4a552bf-c4fb-4c79-94c2-cc1008e31cfb",
              "title": "DELETE /deleteCourse/:id",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 if creator_id is missing",
                  "fullTitle": "Course Controller Blackbox Tests DELETE /deleteCourse/:id should return 400 if creator_id is missing",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).delete(\"/deleteCourse/1\");\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal({ error: \"creator_id is required\" });",
                  "err": {},
                  "uuid": "483f8526-501a-416d-961e-3e851bfd9cd5",
                  "parentUUID": "e4a552bf-c4fb-4c79-94c2-cc1008e31cfb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should delete a course successfully",
                  "fullTitle": "Course Controller Blackbox Tests DELETE /deleteCourse/:id should delete a course successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"delete\").resolves(true);\nconst res = await request(app)\n  .delete(\"/deleteCourse/1\")\n  .query({ creator_id: 10 });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Course deleted successfully\" });",
                  "err": {},
                  "uuid": "d4fcd644-8f9d-4dee-8600-75cfcf01ccf4",
                  "parentUUID": "e4a552bf-c4fb-4c79-94c2-cc1008e31cfb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if course not found or not authorized",
                  "fullTitle": "Course Controller Blackbox Tests DELETE /deleteCourse/:id should return 404 if course not found or not authorized",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"delete\").resolves(false);\nconst res = await request(app)\n  .delete(\"/deleteCourse/1\")\n  .query({ creator_id: 10 });\nexpect(res.status).to.equal(404);\nexpect(res.body).to.deep.equal({\n  error: \"Course not found or you are not authorized to delete it\"\n});",
                  "err": {},
                  "uuid": "d0d9f7fb-4fcf-4877-a4f6-4c6c353ad0c5",
                  "parentUUID": "e4a552bf-c4fb-4c79-94c2-cc1008e31cfb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests DELETE /deleteCourse/:id should return 500 on error",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"delete\").rejects(new Error(\"DB error\"));\nconst res = await request(app)\n  .delete(\"/deleteCourse/1\")\n  .query({ creator_id: 10 });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "c8936e5c-bc20-43e3-b5e3-3d2df4b5402d",
                  "parentUUID": "e4a552bf-c4fb-4c79-94c2-cc1008e31cfb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "483f8526-501a-416d-961e-3e851bfd9cd5",
                "d4fcd644-8f9d-4dee-8600-75cfcf01ccf4",
                "d0d9f7fb-4fcf-4877-a4f6-4c6c353ad0c5",
                "c8936e5c-bc20-43e3-b5e3-3d2df4b5402d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "64983be3-b324-4348-94f2-b711358406c1",
              "title": "GET /providerCourses",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return provider courses when creator_id is provided",
                  "fullTitle": "Course Controller Blackbox Tests GET /providerCourses should return provider courses when creator_id is provided",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyCourses = [{ course_id: 1, creator_id: 10, name: \"Provider Course\" }];\nstub(CourseModel, \"getProviderCourses\").resolves(dummyCourses);\nconst res = await request(app)\n  .get(\"/providerCourses\")\n  .query({ id: 10 });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ data: dummyCourses });",
                  "err": {},
                  "uuid": "ba3c64db-8cfa-4b0e-8131-7497f975f8ad",
                  "parentUUID": "64983be3-b324-4348-94f2-b711358406c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if creator_id is missing",
                  "fullTitle": "Course Controller Blackbox Tests GET /providerCourses should return 400 if creator_id is missing",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get(\"/providerCourses\");\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal({ error: \"creator_id is required\" });",
                  "err": {},
                  "uuid": "4c5b348a-0e63-438e-8177-c0ce09eeeee5",
                  "parentUUID": "64983be3-b324-4348-94f2-b711358406c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests GET /providerCourses should return 500 on error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"getProviderCourses\").rejects(new Error(\"DB error\"));\nconst res = await request(app)\n  .get(\"/providerCourses\")\n  .query({ id: 10 });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "3d0240f2-b6f4-43e7-8e5e-4874684f5972",
                  "parentUUID": "64983be3-b324-4348-94f2-b711358406c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba3c64db-8cfa-4b0e-8131-7497f975f8ad",
                "4c5b348a-0e63-438e-8177-c0ce09eeeee5",
                "3d0240f2-b6f4-43e7-8e5e-4874684f5972"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8308cfb1-7d31-4dd8-9868-79926c118682",
              "title": "GET /courseEnrolledStudents",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return enrolled students for a course",
                  "fullTitle": "Course Controller Blackbox Tests GET /courseEnrolledStudents should return enrolled students for a course",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyStudents = [{ student_id: 1, name: \"Student A\" }];\nstub(CourseModel, \"getEnrolledStudentsForCourse\").resolves(dummyStudents);\nconst res = await request(app)\n  .get(\"/courseEnrolledStudents\")\n  .query({ courseId: 1 });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ data: dummyStudents });",
                  "err": {},
                  "uuid": "0101ca96-986f-4fe7-baf2-c455d76ec10e",
                  "parentUUID": "8308cfb1-7d31-4dd8-9868-79926c118682",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if courseId is missing",
                  "fullTitle": "Course Controller Blackbox Tests GET /courseEnrolledStudents should return 400 if courseId is missing",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get(\"/courseEnrolledStudents\")\n  .query({});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal({ error: \"course_id is required\" });",
                  "err": {},
                  "uuid": "dec855b6-8491-4ddf-a37a-50073d787e56",
                  "parentUUID": "8308cfb1-7d31-4dd8-9868-79926c118682",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests GET /courseEnrolledStudents should return 500 on error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"getEnrolledStudentsForCourse\").rejects(new Error(\"DB error\"));\nconst res = await request(app)\n  .get(\"/courseEnrolledStudents\")\n  .query({ courseId: 1 });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "8b8f16b5-4f3f-47ea-a0e9-bb713cce71e2",
                  "parentUUID": "8308cfb1-7d31-4dd8-9868-79926c118682",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0101ca96-986f-4fe7-baf2-c455d76ec10e",
                "dec855b6-8491-4ddf-a37a-50073d787e56",
                "8b8f16b5-4f3f-47ea-a0e9-bb713cce71e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "942dedaa-3fcf-4218-a595-de8ecff6c3de",
              "title": "GET /providerEnrollments",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return enrolled students for provider",
                  "fullTitle": "Course Controller Blackbox Tests GET /providerEnrollments should return enrolled students for provider",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyStudents = [{ student_id: 1, name: \"Student A\" }];\nstub(CourseModel, \"getEnrolledStudentsForProvider\").resolves(dummyStudents);\nconst res = await request(app)\n  .get(\"/providerEnrollments\")\n  .query({ creator_id: 10 });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ data: dummyStudents });",
                  "err": {},
                  "uuid": "e4578df7-fc09-4d77-89c9-d23b1f8d2592",
                  "parentUUID": "942dedaa-3fcf-4218-a595-de8ecff6c3de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if creator_id is missing",
                  "fullTitle": "Course Controller Blackbox Tests GET /providerEnrollments should return 400 if creator_id is missing",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get(\"/providerEnrollments\");\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal({ error: \"creator_id is required\" });",
                  "err": {},
                  "uuid": "62761dfd-035e-4537-84f1-62b3349e1744",
                  "parentUUID": "942dedaa-3fcf-4218-a595-de8ecff6c3de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests GET /providerEnrollments should return 500 on error",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"getEnrolledStudentsForProvider\").rejects(new Error(\"DB error\"));\nconst res = await request(app)\n  .get(\"/providerEnrollments\")\n  .query({ creator_id: 10 });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "091cfef2-13f1-4cbf-8f2b-4721d07ce3f1",
                  "parentUUID": "942dedaa-3fcf-4218-a595-de8ecff6c3de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4578df7-fc09-4d77-89c9-d23b1f8d2592",
                "62761dfd-035e-4537-84f1-62b3349e1744",
                "091cfef2-13f1-4cbf-8f2b-4721d07ce3f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a96f185-b870-4f84-aa0c-e60dd104531b",
              "title": "POST /courseModule",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add a course module successfully",
                  "fullTitle": "Course Controller Blackbox Tests POST /courseModule should add a course module successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyModuleResult = { module_id: 555 };\nstub(CourseModel, \"addModule\").resolves(dummyModuleResult);\nconst moduleData = { course_id: 1, title: \"New Module\" };\nconst res = await request(app)\n  .post(\"/courseModule\")\n  .send(moduleData);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.deep.equal({\n  message: \"Course module added successfully!\",\n  module_id: dummyModuleResult.module_id\n});",
                  "err": {},
                  "uuid": "37861c50-a545-49c6-b011-49f47af4c778",
                  "parentUUID": "4a96f185-b870-4f84-aa0c-e60dd104531b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests POST /courseModule should return 500 on error",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"addModule\").rejects(new Error(\"DB error\"));\nconst moduleData = { course_id: 1, title: \"New Module\" };\nconst res = await request(app)\n  .post(\"/courseModule\")\n  .send(moduleData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "ba514f95-c271-47b9-b336-294a0be3e267",
                  "parentUUID": "4a96f185-b870-4f84-aa0c-e60dd104531b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37861c50-a545-49c6-b011-49f47af4c778",
                "ba514f95-c271-47b9-b336-294a0be3e267"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51015f3f-4981-4377-a3ba-d0b90a225dc3",
              "title": "GET /courseModules",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return course modules",
                  "fullTitle": "Course Controller Blackbox Tests GET /courseModules should return course modules",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyModules = [{ module_id: 1, title: \"Module 1\" }];\nstub(CourseModel, \"getModules\").resolves(dummyModules);\nconst res = await request(app)\n  .get(\"/courseModules\")\n  .query({ course_id: \"1\" });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ data: dummyModules });",
                  "err": {},
                  "uuid": "4a0eeea1-b331-4248-a305-3d854e29d8d4",
                  "parentUUID": "51015f3f-4981-4377-a3ba-d0b90a225dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if course_id is missing",
                  "fullTitle": "Course Controller Blackbox Tests GET /courseModules should return 400 if course_id is missing",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get(\"/courseModules\").query({});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal({ error: \"course_id is required\" });",
                  "err": {},
                  "uuid": "a27e2e67-8e66-4008-af3e-8411a8ac9401",
                  "parentUUID": "51015f3f-4981-4377-a3ba-d0b90a225dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests GET /courseModules should return 500 on error",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"getModules\").rejects(new Error(\"DB error\"));\nconst res = await request(app)\n  .get(\"/courseModules\")\n  .query({ course_id: \"1\" });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "44bb93d0-03f6-4124-882c-4a4ccafca9b7",
                  "parentUUID": "51015f3f-4981-4377-a3ba-d0b90a225dc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a0eeea1-b331-4248-a305-3d854e29d8d4",
                "a27e2e67-8e66-4008-af3e-8411a8ac9401",
                "44bb93d0-03f6-4124-882c-4a4ccafca9b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eaad3fdc-c463-40da-8161-eaed265eb3fc",
              "title": "PUT /courseModule/:module_id",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a course module successfully",
                  "fullTitle": "Course Controller Blackbox Tests PUT /courseModule/:module_id should update a course module successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"updateModule\").resolves(true);\nconst updateData = { title: \"Updated Module\" };\nconst res = await request(app)\n  .put(\"/courseModule/123\")\n  .send(updateData);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Module updated successfully\" });",
                  "err": {},
                  "uuid": "c9f7c84a-f103-4f6f-9613-a31947decdae",
                  "parentUUID": "eaad3fdc-c463-40da-8161-eaed265eb3fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if module not found or not updated",
                  "fullTitle": "Course Controller Blackbox Tests PUT /courseModule/:module_id should return 404 if module not found or not updated",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"updateModule\").resolves(false);\nconst updateData = { title: \"Updated Module\" };\nconst res = await request(app)\n  .put(\"/courseModule/123\")\n  .send(updateData);\nexpect(res.status).to.equal(404);\nexpect(res.body).to.deep.equal({ error: \"Module not found or not updated\" });",
                  "err": {},
                  "uuid": "a3a82e79-f3db-413d-bab8-ea3d894c948d",
                  "parentUUID": "eaad3fdc-c463-40da-8161-eaed265eb3fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Blackbox Tests PUT /courseModule/:module_id should return 500 on error",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"updateModule\").rejects(new Error(\"DB error\"));\nconst updateData = { title: \"Updated Module\" };\nconst res = await request(app)\n  .put(\"/courseModule/123\")\n  .send(updateData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "608a6a6b-e5a8-4e6a-97e8-d28cb3349ba8",
                  "parentUUID": "eaad3fdc-c463-40da-8161-eaed265eb3fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9f7c84a-f103-4f6f-9613-a31947decdae",
                "a3a82e79-f3db-413d-bab8-ea3d894c948d",
                "608a6a6b-e5a8-4e6a-97e8-d28cb3349ba8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c5140047-485b-4a94-be97-0fa37c5877b6",
          "title": "CourseEnrollmentController Blackbox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
          "file": "\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"CourseEnrollmentController Blackbox Tests\"",
              "fullTitle": "CourseEnrollmentController Blackbox Tests \"after each\" hook in \"CourseEnrollmentController Blackbox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "5a2da36b-3c23-4539-91f0-253a72158cbf",
              "parentUUID": "c5140047-485b-4a94-be97-0fa37c5877b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b585ba18-7645-45f3-8ac5-a4100edbf9a6",
              "title": "GET /courses/:courseId/enrollments",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all enrollments",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests GET /courses/:courseId/enrollments should return all enrollments",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyEnrollments = [{ enrollment_id: 1, userId: 10 }];\nstub(EnrollmentModel, \"getAll\").resolves(dummyEnrollments);\nconst res = await request(app).get(\"/courses/123/enrollments\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(dummyEnrollments);",
                  "err": {},
                  "uuid": "2ee47315-2fb0-4cf6-aaea-a38ccb406a6a",
                  "parentUUID": "b585ba18-7645-45f3-8ac5-a4100edbf9a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests GET /courses/:courseId/enrollments should return 500 on error",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"getAll\").rejects(new Error(\"DB error\"));\nconst res = await request(app).get(\"/courses/123/enrollments\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "4c5e551e-5386-4446-8204-7a01e0d150cd",
                  "parentUUID": "b585ba18-7645-45f3-8ac5-a4100edbf9a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ee47315-2fb0-4cf6-aaea-a38ccb406a6a",
                "4c5e551e-5386-4446-8204-7a01e0d150cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c16b8fe3-831d-4eec-9dc4-ee19a6741983",
              "title": "GET /courses/:courseId/enrollments/:enrollmentId",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return enrollment by id if found",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests GET /courses/:courseId/enrollments/:enrollmentId should return enrollment by id if found",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyEnrollment = { enrollment_id: 1, userId: 10 };\nstub(EnrollmentModel, \"getById\").resolves(dummyEnrollment);\nconst res = await request(app).get(\"/courses/123/enrollments/1\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(dummyEnrollment);",
                  "err": {},
                  "uuid": "24bf2905-4f33-475b-8d27-92aa12f2e04f",
                  "parentUUID": "c16b8fe3-831d-4eec-9dc4-ee19a6741983",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if enrollment not found",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests GET /courses/:courseId/enrollments/:enrollmentId should return 404 if enrollment not found",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"getById\").resolves(null);\nconst res = await request(app).get(\"/courses/123/enrollments/999\");\nexpect(res.status).to.equal(404);\nexpect(res.body).to.deep.equal({ error: \"Enrollment not found\" });",
                  "err": {},
                  "uuid": "b8191d6d-819b-4423-96e8-e195825d3153",
                  "parentUUID": "c16b8fe3-831d-4eec-9dc4-ee19a6741983",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests GET /courses/:courseId/enrollments/:enrollmentId should return 500 on error",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"getById\").rejects(new Error(\"DB error\"));\nconst res = await request(app).get(\"/courses/123/enrollments/1\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "4d6eccad-5d6d-44e4-b25e-f34a24d73ea6",
                  "parentUUID": "c16b8fe3-831d-4eec-9dc4-ee19a6741983",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "24bf2905-4f33-475b-8d27-92aa12f2e04f",
                "b8191d6d-819b-4423-96e8-e195825d3153",
                "4d6eccad-5d6d-44e4-b25e-f34a24d73ea6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "453bf1df-83b7-4188-9a34-66a897d8ab41",
              "title": "GET /courses/:courseId/enrollment-check",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return enrollment status",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests GET /courses/:courseId/enrollment-check should return enrollment status",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"checkUserEnrollment\").resolves(true);\nconst res = await request(app)\n  .get(\"/courses/123/enrollment-check\")\n  .query({ userId: \"10\" });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ isEnrolled: true });",
                  "err": {},
                  "uuid": "9468b241-ca5c-416c-8f00-b0fca73e129a",
                  "parentUUID": "453bf1df-83b7-4188-9a34-66a897d8ab41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests GET /courses/:courseId/enrollment-check should return 500 on error",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"checkUserEnrollment\").rejects(new Error(\"DB error\"));\nconst res = await request(app)\n  .get(\"/courses/123/enrollment-check\")\n  .query({ userId: \"10\" });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "f3fbc28c-0f52-48f1-a703-9afa20c99f8e",
                  "parentUUID": "453bf1df-83b7-4188-9a34-66a897d8ab41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9468b241-ca5c-416c-8f00-b0fca73e129a",
                "f3fbc28c-0f52-48f1-a703-9afa20c99f8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "813edad1-8181-49de-8a63-138aee43e4e4",
              "title": "POST /courses/:courseId/enrollments",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create an enrollment successfully",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests POST /courses/:courseId/enrollments should create an enrollment successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyEnrollment = { enrollment_id: 50 };\nstub(EnrollmentModel, \"create\").resolves(dummyEnrollment);\nconst enrollmentData = { userId: 10, courseId: \"123\", status: \"active\" };\nconst res = await request(app)\n  .post(\"/courses/123/enrollments\")\n  .send(enrollmentData);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.deep.equal({\n  message: \"Enrollment created successfully\",\n  enrollment_id: dummyEnrollment.enrollment_id,\n});",
                  "err": {},
                  "uuid": "093c52da-fd11-45bd-becf-1690cc6cf151",
                  "parentUUID": "813edad1-8181-49de-8a63-138aee43e4e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests POST /courses/:courseId/enrollments should return 500 on error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"create\").rejects(new Error(\"DB error\"));\nconst enrollmentData = { userId: 10, courseId: \"123\", status: \"active\" };\nconst res = await request(app)\n  .post(\"/courses/123/enrollments\")\n  .send(enrollmentData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "cd9e45f1-4da2-4351-bbb3-3b09e3540e05",
                  "parentUUID": "813edad1-8181-49de-8a63-138aee43e4e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "093c52da-fd11-45bd-becf-1690cc6cf151",
                "cd9e45f1-4da2-4351-bbb3-3b09e3540e05"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a97b69f6-46ad-41bb-83e0-0a28b5e3de68",
              "title": "PUT /courses/:courseId/enrollments/:enrollmentId",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update an enrollment successfully",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests PUT /courses/:courseId/enrollments/:enrollmentId should update an enrollment successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"update\").resolves();\nconst updateData = { status: \"completed\" };\nconst res = await request(app)\n  .put(\"/courses/123/enrollments/1\")\n  .send(updateData);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Enrollment updated successfully\" });",
                  "err": {},
                  "uuid": "8692bfae-d08e-4d3a-81d9-88ad9f09cc30",
                  "parentUUID": "a97b69f6-46ad-41bb-83e0-0a28b5e3de68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests PUT /courses/:courseId/enrollments/:enrollmentId should return 500 on error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"update\").rejects(new Error(\"DB error\"));\nconst updateData = { status: \"completed\" };\nconst res = await request(app)\n  .put(\"/courses/123/enrollments/1\")\n  .send(updateData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "78a282c6-b233-43a1-989f-844ac0c9a39d",
                  "parentUUID": "a97b69f6-46ad-41bb-83e0-0a28b5e3de68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8692bfae-d08e-4d3a-81d9-88ad9f09cc30",
                "78a282c6-b233-43a1-989f-844ac0c9a39d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca79ddb1-d789-4ced-ad9f-c2efe2713579",
              "title": "DELETE /courses/:courseId/enrollments/:enrollmentId",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseEnrollmentController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete an enrollment successfully",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests DELETE /courses/:courseId/enrollments/:enrollmentId should delete an enrollment successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"delete\").resolves();\nconst res = await request(app).delete(\"/courses/123/enrollments/1\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Enrollment deleted successfully\" });",
                  "err": {},
                  "uuid": "a2ed112d-e7de-4700-8f07-b24e31eda2a0",
                  "parentUUID": "ca79ddb1-d789-4ced-ad9f-c2efe2713579",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Blackbox Tests DELETE /courses/:courseId/enrollments/:enrollmentId should return 500 on error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"delete\").rejects(new Error(\"DB error\"));\nconst res = await request(app).delete(\"/courses/123/enrollments/1\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "092e06af-deac-4a82-8f15-a5a5870e7795",
                  "parentUUID": "ca79ddb1-d789-4ced-ad9f-c2efe2713579",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2ed112d-e7de-4700-8f07-b24e31eda2a0",
                "092e06af-deac-4a82-8f15-a5a5870e7795"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b2f7588f-76c6-4bc7-86c5-23483f75ced6",
          "title": "CourseModuleController Blackbox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
          "file": "\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"CourseModuleController Blackbox Tests\"",
              "fullTitle": "CourseModuleController Blackbox Tests \"after each\" hook in \"CourseModuleController Blackbox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "348accce-625c-4a0c-936d-723bbc1409b2",
              "parentUUID": "b2f7588f-76c6-4bc7-86c5-23483f75ced6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "9aa30649-82ec-49d2-8d4d-34f7e1432585",
              "title": "GET /courses/:courseId/modules",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all modules for the given course",
                  "fullTitle": "CourseModuleController Blackbox Tests GET /courses/:courseId/modules should return all modules for the given course",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyModules = [{ module_id: 1, moduleName: \"Module 1\" }];\nstub(CourseModuleModel, \"getAllForCourse\").resolves(dummyModules);\nconst res = await request(app).get(\"/courses/100/modules\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(dummyModules);",
                  "err": {},
                  "uuid": "23012b7f-5ffd-4313-bd0a-357f797aa34a",
                  "parentUUID": "9aa30649-82ec-49d2-8d4d-34f7e1432585",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseModuleController Blackbox Tests GET /courses/:courseId/modules should return 500 on error",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModuleModel, \"getAllForCourse\").rejects(new Error(\"DB error\"));\nconst res = await request(app).get(\"/courses/100/modules\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "d933181f-b40b-437b-8225-6ccc21b1cb4f",
                  "parentUUID": "9aa30649-82ec-49d2-8d4d-34f7e1432585",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23012b7f-5ffd-4313-bd0a-357f797aa34a",
                "d933181f-b40b-437b-8225-6ccc21b1cb4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c03d4ce0-1a2d-412e-bbe1-b1791a8ac9ec",
              "title": "GET /courses/:courseId/modules/:moduleId",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return module data if found",
                  "fullTitle": "CourseModuleController Blackbox Tests GET /courses/:courseId/modules/:moduleId should return module data if found",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyModule = { module_id: 2, moduleName: \"Module 2\" };\nstub(CourseModuleModel, \"getById\").resolves(dummyModule);\nconst res = await request(app).get(\"/courses/100/modules/2\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(dummyModule);",
                  "err": {},
                  "uuid": "bd8ec31c-216a-4ce8-abee-5622aac0b55b",
                  "parentUUID": "c03d4ce0-1a2d-412e-bbe1-b1791a8ac9ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if module not found",
                  "fullTitle": "CourseModuleController Blackbox Tests GET /courses/:courseId/modules/:moduleId should return 404 if module not found",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModuleModel, \"getById\").resolves(null);\nconst res = await request(app).get(\"/courses/100/modules/999\");\nexpect(res.status).to.equal(404);\nexpect(res.body).to.deep.equal({ error: \"Module not found\" });",
                  "err": {},
                  "uuid": "a0e747b9-b4fa-4be4-860a-259426666e05",
                  "parentUUID": "c03d4ce0-1a2d-412e-bbe1-b1791a8ac9ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseModuleController Blackbox Tests GET /courses/:courseId/modules/:moduleId should return 500 on error",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModuleModel, \"getById\").rejects(new Error(\"DB error\"));\nconst res = await request(app).get(\"/courses/100/modules/2\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "c60e2749-0b1b-4d7d-b29e-dce370a87e4e",
                  "parentUUID": "c03d4ce0-1a2d-412e-bbe1-b1791a8ac9ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd8ec31c-216a-4ce8-abee-5622aac0b55b",
                "a0e747b9-b4fa-4be4-860a-259426666e05",
                "c60e2749-0b1b-4d7d-b29e-dce370a87e4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9f2c1725-f719-458d-948c-3672dc0784f0",
              "title": "POST /courses/:courseId/modules",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new module and return 201",
                  "fullTitle": "CourseModuleController Blackbox Tests POST /courses/:courseId/modules should create a new module and return 201",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyModule = { module_id: 55 };\nstub(CourseModuleModel, \"create\").resolves(dummyModule);\nconst moduleData = { moduleName: \"New Module\", moduleContent: \"Some content\" };\nconst res = await request(app)\n  .post(\"/courses/100/modules\")\n  .send(moduleData);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.deep.equal({\n  message: \"Module created successfully\",\n  moduleId: dummyModule.module_id\n});",
                  "err": {},
                  "uuid": "aef5cbd7-b1f6-4c71-8164-c5b1347d0139",
                  "parentUUID": "9f2c1725-f719-458d-948c-3672dc0784f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseModuleController Blackbox Tests POST /courses/:courseId/modules should return 500 on error",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModuleModel, \"create\").rejects(new Error(\"DB error\"));\nconst moduleData = { moduleName: \"New Module\", moduleContent: \"Some content\" };\nconst res = await request(app)\n  .post(\"/courses/100/modules\")\n  .send(moduleData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "bd5e7cee-db40-4a27-b66a-f079279d0b77",
                  "parentUUID": "9f2c1725-f719-458d-948c-3672dc0784f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aef5cbd7-b1f6-4c71-8164-c5b1347d0139",
                "bd5e7cee-db40-4a27-b66a-f079279d0b77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5bd3a0d5-542b-44fc-aad8-89242660fee1",
              "title": "PUT /courses/:courseId/modules/:moduleId",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a module and return 200",
                  "fullTitle": "CourseModuleController Blackbox Tests PUT /courses/:courseId/modules/:moduleId should update a module and return 200",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModuleModel, \"update\").resolves();\nconst updateData = { moduleName: \"Updated Name\", moduleContent: \"Updated content\" };\nconst res = await request(app)\n  .put(\"/courses/100/modules/55\")\n  .send(updateData);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Module updated successfully\" });",
                  "err": {},
                  "uuid": "27cd4e33-c7ce-4e40-bf35-0f459116ef13",
                  "parentUUID": "5bd3a0d5-542b-44fc-aad8-89242660fee1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseModuleController Blackbox Tests PUT /courses/:courseId/modules/:moduleId should return 500 on error",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModuleModel, \"update\").rejects(new Error(\"DB error\"));\nconst updateData = { moduleName: \"Updated Name\", moduleContent: \"Updated content\" };\nconst res = await request(app)\n  .put(\"/courses/100/modules/55\")\n  .send(updateData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "c7a86b95-62d4-4e31-8adf-750c332da995",
                  "parentUUID": "5bd3a0d5-542b-44fc-aad8-89242660fee1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27cd4e33-c7ce-4e40-bf35-0f459116ef13",
                "c7a86b95-62d4-4e31-8adf-750c332da995"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4066fc08-2b45-40fc-9b6f-b45f15142db4",
              "title": "DELETE /courses/:courseId/modules/:moduleId",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseModuleController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a module and return 200",
                  "fullTitle": "CourseModuleController Blackbox Tests DELETE /courses/:courseId/modules/:moduleId should delete a module and return 200",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModuleModel, \"delete\").resolves();\nconst res = await request(app).delete(\"/courses/100/modules/55\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Module deleted successfully\" });",
                  "err": {},
                  "uuid": "0b1c5704-6027-4414-af2f-20e5caf886db",
                  "parentUUID": "4066fc08-2b45-40fc-9b6f-b45f15142db4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseModuleController Blackbox Tests DELETE /courses/:courseId/modules/:moduleId should return 500 on error",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModuleModel, \"delete\").rejects(new Error(\"DB error\"));\nconst res = await request(app).delete(\"/courses/100/modules/55\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "1304730c-5f29-4a54-a085-33ee30f940f9",
                  "parentUUID": "4066fc08-2b45-40fc-9b6f-b45f15142db4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b1c5704-6027-4414-af2f-20e5caf886db",
                "1304730c-5f29-4a54-a085-33ee30f940f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3ac849bc-f0fc-4fc2-9efe-d20b5cbc246a",
          "title": "CourseReviewController Blackbox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
          "file": "\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"CourseReviewController Blackbox Tests\"",
              "fullTitle": "CourseReviewController Blackbox Tests \"after each\" hook in \"CourseReviewController Blackbox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "137ecc96-a8ec-4983-858e-3a6e232c0690",
              "parentUUID": "3ac849bc-f0fc-4fc2-9efe-d20b5cbc246a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "33927172-fbbe-438c-b3d9-a0e03a8b3bd8",
              "title": "GET /courses/:courseId/reviews",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return reviews for the given course (with query)",
                  "fullTitle": "CourseReviewController Blackbox Tests GET /courses/:courseId/reviews should return reviews for the given course (with query)",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyReviews = [{ reviewId: 1, rating: 5 }];\nstub(CourseReviewModel, \"getReviews\").resolves(dummyReviews);\nconst res = await request(app)\n  .get(\"/courses/100/reviews\")\n  .query({ externalReferenceNumber: \"abc123\" });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(dummyReviews);",
                  "err": {},
                  "uuid": "0c4e16c6-0dda-415d-8fef-cd578ba63bc2",
                  "parentUUID": "33927172-fbbe-438c-b3d9-a0e03a8b3bd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return reviews using the /courses/reviews endpoint",
                  "fullTitle": "CourseReviewController Blackbox Tests GET /courses/:courseId/reviews should return reviews using the /courses/reviews endpoint",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyReviews = [{ reviewId: 2, rating: 4 }];\nstub(CourseReviewModel, \"getReviews\").resolves(dummyReviews);\nconst res = await request(app)\n  .get(\"/courses/reviews\")\n  .query({ courseId: \"100\", externalReferenceNumber: \"xyz789\" });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(dummyReviews);",
                  "err": {},
                  "uuid": "0ab63570-5ed3-4fb9-a034-bcdd2b0f25bf",
                  "parentUUID": "33927172-fbbe-438c-b3d9-a0e03a8b3bd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseReviewController Blackbox Tests GET /courses/:courseId/reviews should return 500 on error",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseReviewModel, \"getReviews\").rejects(new Error(\"DB error\"));\nconst res = await request(app)\n  .get(\"/courses/100/reviews\")\n  .query({ externalReferenceNumber: \"abc123\" });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "08526b02-8659-4bf0-bc1b-2959d5d63d53",
                  "parentUUID": "33927172-fbbe-438c-b3d9-a0e03a8b3bd8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c4e16c6-0dda-415d-8fef-cd578ba63bc2",
                "0ab63570-5ed3-4fb9-a034-bcdd2b0f25bf",
                "08526b02-8659-4bf0-bc1b-2959d5d63d53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d7d9402-2791-4d30-b435-c697a919d2b8",
              "title": "GET /courses/:courseId/reviews/:reviewId",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return review data if found",
                  "fullTitle": "CourseReviewController Blackbox Tests GET /courses/:courseId/reviews/:reviewId should return review data if found",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyReview = { reviewId: 1, rating: 5, comment: \"Great!\" };\nstub(CourseReviewModel, \"getById\").resolves(dummyReview);\nconst res = await request(app).get(\"/courses/100/reviews/1\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(dummyReview);",
                  "err": {},
                  "uuid": "11544c8f-4a54-4640-b44b-1ae5f41c321b",
                  "parentUUID": "4d7d9402-2791-4d30-b435-c697a919d2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if review is not found",
                  "fullTitle": "CourseReviewController Blackbox Tests GET /courses/:courseId/reviews/:reviewId should return 404 if review is not found",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseReviewModel, \"getById\").resolves(null);\nconst res = await request(app).get(\"/courses/100/reviews/999\");\nexpect(res.status).to.equal(404);\nexpect(res.body).to.deep.equal({ error: \"Review not found\" });",
                  "err": {},
                  "uuid": "3be3fc07-b70c-4779-9e74-c54c864df7cb",
                  "parentUUID": "4d7d9402-2791-4d30-b435-c697a919d2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseReviewController Blackbox Tests GET /courses/:courseId/reviews/:reviewId should return 500 on error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseReviewModel, \"getById\").rejects(new Error(\"DB error\"));\nconst res = await request(app).get(\"/courses/100/reviews/1\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "869657ba-a9a3-485f-ada3-909c5ca0d22a",
                  "parentUUID": "4d7d9402-2791-4d30-b435-c697a919d2b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11544c8f-4a54-4640-b44b-1ae5f41c321b",
                "3be3fc07-b70c-4779-9e74-c54c864df7cb",
                "869657ba-a9a3-485f-ada3-909c5ca0d22a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d2fcb51-a453-49a4-980e-b2472a79f0c7",
              "title": "POST /courses/:courseId/reviews",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a review successfully using courseId in path",
                  "fullTitle": "CourseReviewController Blackbox Tests POST /courses/:courseId/reviews should create a review successfully using courseId in path",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyResult = { reviewId: 10 };\nstub(CourseReviewModel, \"createReview\").resolves(dummyResult);\nconst reviewData = {\n  rating: 5,\n  comment: \"Excellent course\",\n  userId: 20,\n  externalReferenceNumber: \"ext-001\"\n};\nconst res = await request(app)\n  .post(\"/courses/100/reviews\")\n  .send(reviewData);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.deep.equal({\n  message: \"Review created successfully\",\n  reviewId: dummyResult.reviewId\n});",
                  "err": {},
                  "uuid": "3c7d36c2-a792-450c-91a4-63a5692e4b64",
                  "parentUUID": "6d2fcb51-a453-49a4-980e-b2472a79f0c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create a review successfully using /courses/reviews endpoint",
                  "fullTitle": "CourseReviewController Blackbox Tests POST /courses/:courseId/reviews should create a review successfully using /courses/reviews endpoint",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyResult = { reviewId: 11 };\nstub(CourseReviewModel, \"createReview\").resolves(dummyResult);\nconst reviewData = {\n  rating: 4,\n  comment: \"Good course\",\n  userId: 30,\n  externalReferenceNumber: \"ext-002\"\n};\nconst res = await request(app)\n  .post(\"/courses/reviews\")\n  .send(reviewData);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.deep.equal({\n  message: \"Review created successfully\",\n  reviewId: dummyResult.reviewId\n});",
                  "err": {},
                  "uuid": "b6c21142-af89-4b59-8d9a-f06fe0a4e213",
                  "parentUUID": "6d2fcb51-a453-49a4-980e-b2472a79f0c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseReviewController Blackbox Tests POST /courses/:courseId/reviews should return 500 on error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseReviewModel, \"createReview\").rejects(new Error(\"DB error\"));\nconst reviewData = {\n  rating: 4,\n  comment: \"Good course\",\n  userId: 30,\n  externalReferenceNumber: \"ext-002\"\n};\nconst res = await request(app)\n  .post(\"/courses/100/reviews\")\n  .send(reviewData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "56083f2e-9118-4efa-9561-feea22c9e595",
                  "parentUUID": "6d2fcb51-a453-49a4-980e-b2472a79f0c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c7d36c2-a792-450c-91a4-63a5692e4b64",
                "b6c21142-af89-4b59-8d9a-f06fe0a4e213",
                "56083f2e-9118-4efa-9561-feea22c9e595"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "80803fc0-f123-4fd9-9c38-fa871c1c9891",
              "title": "PUT /courses/reviews/:reviewId",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a review successfully",
                  "fullTitle": "CourseReviewController Blackbox Tests PUT /courses/reviews/:reviewId should update a review successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseReviewModel, \"updateReview\").resolves();\nconst updateData = { rating: 3, comment: \"Average course\" };\nconst res = await request(app)\n  .put(\"/courses/reviews/1\")\n  .send(updateData);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Review updated successfully\" });",
                  "err": {},
                  "uuid": "4e1b7e41-4e8b-42ed-acdf-074c2832b312",
                  "parentUUID": "80803fc0-f123-4fd9-9c38-fa871c1c9891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseReviewController Blackbox Tests PUT /courses/reviews/:reviewId should return 500 on error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseReviewModel, \"updateReview\").rejects(new Error(\"DB error\"));\nconst updateData = { rating: 3, comment: \"Average course\" };\nconst res = await request(app)\n  .put(\"/courses/reviews/1\")\n  .send(updateData);\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "9a91a0b3-53e4-4c03-b87e-6f48f9ad4a66",
                  "parentUUID": "80803fc0-f123-4fd9-9c38-fa871c1c9891",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e1b7e41-4e8b-42ed-acdf-074c2832b312",
                "9a91a0b3-53e4-4c03-b87e-6f48f9ad4a66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a08bcc85-3982-4281-a6a0-6aca033bc249",
              "title": "DELETE /courses/reviews/:reviewId",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
              "file": "\\test\\integration\\controller\\CourseReviewController.blackbox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a review successfully",
                  "fullTitle": "CourseReviewController Blackbox Tests DELETE /courses/reviews/:reviewId should delete a review successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseReviewModel, \"deleteReview\").resolves();\nconst res = await request(app).delete(\"/courses/reviews/1\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal({ message: \"Review deleted successfully\" });",
                  "err": {},
                  "uuid": "cf3598b8-9b5c-42f3-b477-00e91da7bf24",
                  "parentUUID": "a08bcc85-3982-4281-a6a0-6aca033bc249",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseReviewController Blackbox Tests DELETE /courses/reviews/:reviewId should return 500 on error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseReviewModel, \"deleteReview\").rejects(new Error(\"DB error\"));\nconst res = await request(app).delete(\"/courses/reviews/1\");\nexpect(res.status).to.equal(500);\nexpect(res.body).to.deep.equal({ error: \"Database query failed\" });",
                  "err": {},
                  "uuid": "ebe9853c-e05c-4cd5-b68f-3cd94fd23ec1",
                  "parentUUID": "a08bcc85-3982-4281-a6a0-6aca033bc249",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf3598b8-9b5c-42f3-b477-00e91da7bf24",
                "ebe9853c-e05c-4cd5-b68f-3cd94fd23ec1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ffd39d47-ad04-4790-9b61-622620328bf7",
          "title": "AdminController",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\AdminController.whitebox.test.mjs",
          "file": "\\test\\unit\\controller\\AdminController.whitebox.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"AdminController\"",
              "fullTitle": "AdminController \"before each\" hook in \"AdminController\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = {\n  query: {},\n  body: {}\n};\nres = {\n  status: stub().returnsThis(),\n  json: stub()\n};",
              "err": {},
              "uuid": "fbf69c7a-fba2-472f-b810-931d88f6e2f9",
              "parentUUID": "ffd39d47-ad04-4790-9b61-622620328bf7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"AdminController\"",
              "fullTitle": "AdminController \"after each\" hook in \"AdminController\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "95d42e01-3fef-43b0-9a70-c8931d19e993",
              "parentUUID": "ffd39d47-ad04-4790-9b61-622620328bf7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "9f837997-53a2-44b5-8e7c-cc98fd12639c",
              "title": "getAdminTableData",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\AdminController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\AdminController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 if the table query parameter is missing",
                  "fullTitle": "AdminController getAdminTableData should return 400 if the table query parameter is missing",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = {};\nawait getAdminTableData(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ error: \"Invalid table name\" })).to.be.true;",
                  "err": {},
                  "uuid": "3af012b5-9bbb-4b76-aec6-8a7e343a5a6d",
                  "parentUUID": "9f837997-53a2-44b5-8e7c-cc98fd12639c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if the table query parameter is invalid",
                  "fullTitle": "AdminController getAdminTableData should return 400 if the table query parameter is invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = { table: \"NonExistingTable\" };\nawait getAdminTableData(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ error: \"Invalid table name\" })).to.be.true;",
                  "err": {},
                  "uuid": "61e29f19-5cad-4762-ba81-fa2caaa293ee",
                  "parentUUID": "9f837997-53a2-44b5-8e7c-cc98fd12639c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should query admin data correctly for Admin table",
                  "fullTitle": "AdminController getAdminTableData should query admin data correctly for Admin table",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = { table: \"Admin\" };\nconst fakeRows = [{ user_id: 1, username: \"admin\" }];\nconst dbQueryStub = stub(db, \"query\").resolves([fakeRows]);\nawait getAdminTableData(req, res);\nexpect(dbQueryStub.calledOnce).to.be.true;\nexpect(\n  dbQueryStub.calledWithExactly(\"SELECT * FROM ?? WHERE role = ?\", [\n    \"UserAccount\",\n    \"admin\"\n  ])\n).to.be.true;\nexpect(res.json.calledWith(fakeRows)).to.be.true;",
                  "err": {},
                  "uuid": "53e1e329-9aa8-417b-b83c-5b7bb5930670",
                  "parentUUID": "9f837997-53a2-44b5-8e7c-cc98fd12639c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should query non-admin table correctly",
                  "fullTitle": "AdminController getAdminTableData should query non-admin table correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = { table: \"Courses\" };\nconst fakeRows = [{ course_id: 101, course_name: \"Course 101\" }];\nconst dbQueryStub = stub(db, \"query\").resolves([fakeRows]);\nawait getAdminTableData(req, res);\nexpect(dbQueryStub.calledOnce).to.be.true;\nexpect(dbQueryStub.calledWithExactly(\"SELECT * FROM ??\", [\"Course\"])).to.be.true;\nexpect(res.json.calledWith(fakeRows)).to.be.true;",
                  "err": {},
                  "uuid": "1cbd4d14-af51-4d85-980a-c70341f1f96d",
                  "parentUUID": "9f837997-53a2-44b5-8e7c-cc98fd12639c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if db.query throws an error",
                  "fullTitle": "AdminController getAdminTableData should return 500 if db.query throws an error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = { table: \"Courses\" };\nstub(db, \"query\").rejects(new Error(\"Database error\"));\nawait getAdminTableData(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Internal server error\" })).to.be.true;",
                  "err": {},
                  "uuid": "c72d50cf-e86e-4f24-9464-4971e47b212c",
                  "parentUUID": "9f837997-53a2-44b5-8e7c-cc98fd12639c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3af012b5-9bbb-4b76-aec6-8a7e343a5a6d",
                "61e29f19-5cad-4762-ba81-fa2caaa293ee",
                "53e1e329-9aa8-417b-b83c-5b7bb5930670",
                "1cbd4d14-af51-4d85-980a-c70341f1f96d",
                "c72d50cf-e86e-4f24-9464-4971e47b212c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "393373b8-4cb9-44f8-a4da-0832fff15300",
              "title": "updateAdminTableData",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\AdminController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\AdminController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 if the table query parameter is missing",
                  "fullTitle": "AdminController updateAdminTableData should return 400 if the table query parameter is missing",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = {};\nreq.body = { data: [] };\nawait updateAdminTableData(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ error: \"Invalid table name\" })).to.be.true;",
                  "err": {},
                  "uuid": "a1bcb65b-b2ff-4048-ad8f-68c5ce7eb5d9",
                  "parentUUID": "393373b8-4cb9-44f8-a4da-0832fff15300",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if data is missing or not an array",
                  "fullTitle": "AdminController updateAdminTableData should return 400 if data is missing or not an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = { table: \"Courses\" };\nreq.body = { data: \"notAnArray\" };\nawait updateAdminTableData(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(\n  res.json.calledWith({ error: \"Invalid data format, expected an array\" })\n).to.be.true;",
                  "err": {},
                  "uuid": "0373f2b7-d560-41bb-9d85-74607e6f8fc8",
                  "parentUUID": "393373b8-4cb9-44f8-a4da-0832fff15300",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should process update requests correctly",
                  "fullTitle": "AdminController updateAdminTableData should process update requests correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = { table: \"Courses\" };\nreq.body = {\n  data: [\n    {\n      course_id: 101,\n      module_name: \"Updated Course Name\",\n      created_at: \"2023-04-01T12:00:00Z\"\n    }\n  ]\n};\nconst dbQueryStub = stub(db, \"query\").resolves();\nawait updateAdminTableData(req, res);\nexpect(dbQueryStub.called).to.be.true;\nexpect(res.json.calledWith({ message: \"Data updated successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "6f3a1928-f539-4ac6-8c52-0a20e7290df6",
                  "parentUUID": "393373b8-4cb9-44f8-a4da-0832fff15300",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if any db.query throws an error during update",
                  "fullTitle": "AdminController updateAdminTableData should return 500 if any db.query throws an error during update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = { table: \"Courses\" };\nreq.body = { data: [{ course_id: 101, module_name: \"Name\" }] };\nstub(db, \"query\").rejects(new Error(\"Database error\"));\nawait updateAdminTableData(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Internal server error\" })).to.be.true;",
                  "err": {},
                  "uuid": "831c53f7-4427-4458-aeda-d199d4670eed",
                  "parentUUID": "393373b8-4cb9-44f8-a4da-0832fff15300",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1bcb65b-b2ff-4048-ad8f-68c5ce7eb5d9",
                "0373f2b7-d560-41bb-9d85-74607e6f8fc8",
                "6f3a1928-f539-4ac6-8c52-0a20e7290df6",
                "831c53f7-4427-4458-aeda-d199d4670eed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a66cc16c-b59a-4e25-b8cd-c7d379fc1e1f",
          "title": "Certificate Controller Whitebox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CertificateController.whitebox.test.mjs",
          "file": "\\test\\unit\\controller\\CertificateController.whitebox.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Certificate Controller Whitebox Tests\"",
              "fullTitle": "Certificate Controller Whitebox Tests \"before each\" hook in \"Certificate Controller Whitebox Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = {\n  body: {},\n};\nres = {\n  status: stub().returnsThis(),\n  json: stub()\n};",
              "err": {},
              "uuid": "8a9eb679-3085-4f84-b1ea-acad98ba3749",
              "parentUUID": "a66cc16c-b59a-4e25-b8cd-c7d379fc1e1f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Certificate Controller Whitebox Tests\"",
              "fullTitle": "Certificate Controller Whitebox Tests \"after each\" hook in \"Certificate Controller Whitebox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "8d889900-7e99-479c-8fb0-2ddf7163a565",
              "parentUUID": "a66cc16c-b59a-4e25-b8cd-c7d379fc1e1f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "04147d19-7b56-41fd-a13e-13f46315af3c",
              "title": "emailCertificate",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CertificateController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CertificateController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 if required certificate data is missing",
                  "fullTitle": "Certificate Controller Whitebox Tests emailCertificate should return 400 if required certificate data is missing",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.body = { email: \"user@example.com\", username: \"User\" };\nawait certificateController.emailCertificate(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ error: \"Missing required certificate data\" })).to.be.true;",
                  "err": {},
                  "uuid": "22614305-5798-4137-9ca6-f3961a915974",
                  "parentUUID": "04147d19-7b56-41fd-a13e-13f46315af3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should email certificate successfully",
                  "fullTitle": "Certificate Controller Whitebox Tests emailCertificate should email certificate successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyPdfBuffer = Buffer.from(\"dummy pdf\");\nconst dummyEmailResponse = { status: \"sent\" };\nreq.body = {\n  email: \"user@example.com\",\n  username: \"User\",\n  course: \"Course 101\",\n  date: \"2025-04-01\"\n};\nstub(CertificateService, \"generateCertificatePdf\").resolves(dummyPdfBuffer);\nstub(GmailService, \"sendCertificateEmail\").resolves(dummyEmailResponse);\nawait certificateController.emailCertificate(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n  message: \"Certificate emailed successfully\",\n  emailResponse: dummyEmailResponse\n})).to.be.true;",
                  "err": {},
                  "uuid": "8da42177-a627-4f93-ac16-fe35d89b275d",
                  "parentUUID": "04147d19-7b56-41fd-a13e-13f46315af3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if an error occurs during certificate emailing",
                  "fullTitle": "Certificate Controller Whitebox Tests emailCertificate should return 500 if an error occurs during certificate emailing",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.body = {\n  email: \"user@example.com\",\n  username: \"User\",\n  course: \"Course 101\",\n  date: \"2025-04-01\"\n};\nstub(CertificateService, \"generateCertificatePdf\").rejects(new Error(\"Test error\"));\nawait certificateController.emailCertificate(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Failed to email certificate\" })).to.be.true;",
                  "err": {},
                  "uuid": "f5195fca-9dee-4e38-98b2-bb74a275cfd6",
                  "parentUUID": "04147d19-7b56-41fd-a13e-13f46315af3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22614305-5798-4137-9ca6-f3961a915974",
                "8da42177-a627-4f93-ac16-fe35d89b275d",
                "f5195fca-9dee-4e38-98b2-bb74a275cfd6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "684cbcbd-dcf6-4be6-af13-72d94dcaa4d3",
          "title": "Feedback Controller Whitebox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
          "file": "\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Feedback Controller Whitebox Tests\"",
              "fullTitle": "Feedback Controller Whitebox Tests \"before each\" hook in \"Feedback Controller Whitebox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = {\n  params: {},\n  body: {},\n};\nres = {\n  status: stub().returnsThis(),\n  json: stub(),\n};",
              "err": {},
              "uuid": "fa7e6be3-cb78-4ab5-ae65-3ee4e741d6ec",
              "parentUUID": "684cbcbd-dcf6-4be6-af13-72d94dcaa4d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Feedback Controller Whitebox Tests\"",
              "fullTitle": "Feedback Controller Whitebox Tests \"after each\" hook in \"Feedback Controller Whitebox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "8c756f3d-97bd-471d-b5c0-f70cc908248f",
              "parentUUID": "684cbcbd-dcf6-4be6-af13-72d94dcaa4d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "f32a9934-84d0-48bc-835e-a699a1dbfcbd",
              "title": "getAllFeedback",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all feedback",
                  "fullTitle": "Feedback Controller Whitebox Tests getAllFeedback should return all feedback",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyFeedback = [{ id: 1, comment: \"Test comment\" }];\nstub(FeedbackModel, \"getAll\").resolves(dummyFeedback);\nawait feedbackController.getAllFeedback(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(dummyFeedback)).to.be.true;",
                  "err": {},
                  "uuid": "39971eb1-e404-49ff-a321-8b3e53917801",
                  "parentUUID": "f32a9934-84d0-48bc-835e-a699a1dbfcbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if an error occurs",
                  "fullTitle": "Feedback Controller Whitebox Tests getAllFeedback should return 500 if an error occurs",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(FeedbackModel, \"getAll\").rejects(new Error(\"DB error\"));\nawait feedbackController.getAllFeedback(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "0b3421f1-335e-442b-8f8d-b65114cba4b9",
                  "parentUUID": "f32a9934-84d0-48bc-835e-a699a1dbfcbd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39971eb1-e404-49ff-a321-8b3e53917801",
                "0b3421f1-335e-442b-8f8d-b65114cba4b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2fb39a4d-4d18-4ca6-82bb-d4f4177e8d43",
              "title": "getFeedbackById",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return feedback if found",
                  "fullTitle": "Feedback Controller Whitebox Tests getFeedbackById should return feedback if found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyFeedback = { id: 1, comment: \"Test comment\" };\nreq.params.id = \"1\";\nstub(FeedbackModel, \"getById\").resolves(dummyFeedback);\nawait feedbackController.getFeedbackById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(dummyFeedback)).to.be.true;",
                  "err": {},
                  "uuid": "1547d8a7-469b-40d3-8b87-b18b910490f0",
                  "parentUUID": "2fb39a4d-4d18-4ca6-82bb-d4f4177e8d43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if feedback not found",
                  "fullTitle": "Feedback Controller Whitebox Tests getFeedbackById should return 404 if feedback not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nstub(FeedbackModel, \"getById\").resolves(null);\nawait feedbackController.getFeedbackById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ error: \"Feedback not found\" })).to.be.true;",
                  "err": {},
                  "uuid": "d4fa7a2b-8ccc-4528-ae3e-126d88a7d6ee",
                  "parentUUID": "2fb39a4d-4d18-4ca6-82bb-d4f4177e8d43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Feedback Controller Whitebox Tests getFeedbackById should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nstub(FeedbackModel, \"getById\").rejects(new Error(\"DB error\"));\nawait feedbackController.getFeedbackById(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "7637a7e0-f7a3-4ae1-af34-e41b5e68a182",
                  "parentUUID": "2fb39a4d-4d18-4ca6-82bb-d4f4177e8d43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1547d8a7-469b-40d3-8b87-b18b910490f0",
                "d4fa7a2b-8ccc-4528-ae3e-126d88a7d6ee",
                "7637a7e0-f7a3-4ae1-af34-e41b5e68a182"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6765af55-50db-46b1-ad31-144fd3ea80ac",
              "title": "createFeedback",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create feedback and return the inserted id",
                  "fullTitle": "Feedback Controller Whitebox Tests createFeedback should create feedback and return the inserted id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.body = { comment: \"Test comment\" };\nstub(FeedbackModel, \"create\").resolves(42);\nawait feedbackController.createFeedback(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n  message: \"Feedback submitted successfully\",\n  feedbackId: 42,\n})).to.be.true;",
                  "err": {},
                  "uuid": "62346091-b55f-461d-8d09-45b690d5cf75",
                  "parentUUID": "6765af55-50db-46b1-ad31-144fd3ea80ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Feedback Controller Whitebox Tests createFeedback should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.body = { comment: \"Test comment\" };\nstub(FeedbackModel, \"create\").rejects(new Error(\"DB error\"));\nawait feedbackController.createFeedback(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "86a200c3-7633-415f-be37-a4b27735a18e",
                  "parentUUID": "6765af55-50db-46b1-ad31-144fd3ea80ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62346091-b55f-461d-8d09-45b690d5cf75",
                "86a200c3-7633-415f-be37-a4b27735a18e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc93acfe-88b9-4e7d-8c4e-53a5cd1e5efc",
              "title": "updateFeedback",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update feedback successfully",
                  "fullTitle": "Feedback Controller Whitebox Tests updateFeedback should update feedback successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nreq.body = { comment: \"Updated comment\" };\nstub(FeedbackModel, \"update\").resolves();\nawait feedbackController.updateFeedback(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Feedback updated successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "bc430f2b-b99e-4133-abe3-1c6d33c9e9de",
                  "parentUUID": "bc93acfe-88b9-4e7d-8c4e-53a5cd1e5efc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Feedback Controller Whitebox Tests updateFeedback should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nreq.body = { comment: \"Updated comment\" };\nstub(FeedbackModel, \"update\").rejects(new Error(\"DB error\"));\nawait feedbackController.updateFeedback(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "9270b655-9e66-420e-95cd-d7e120be9915",
                  "parentUUID": "bc93acfe-88b9-4e7d-8c4e-53a5cd1e5efc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc430f2b-b99e-4133-abe3-1c6d33c9e9de",
                "9270b655-9e66-420e-95cd-d7e120be9915"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "11b18759-4e48-4427-b5da-5d459c4e3672",
              "title": "deleteFeedback",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\ContactFeedback.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete feedback successfully",
                  "fullTitle": "Feedback Controller Whitebox Tests deleteFeedback should delete feedback successfully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nstub(FeedbackModel, \"delete\").resolves();\nawait feedbackController.deleteFeedback(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Feedback deleted successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "70a6b9ad-2332-4406-ba22-671a9c94e307",
                  "parentUUID": "11b18759-4e48-4427-b5da-5d459c4e3672",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Feedback Controller Whitebox Tests deleteFeedback should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nstub(FeedbackModel, \"delete\").rejects(new Error(\"DB error\"));\nawait feedbackController.deleteFeedback(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "e892bc52-1970-41d5-b4d0-aac65223f89f",
                  "parentUUID": "11b18759-4e48-4427-b5da-5d459c4e3672",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70a6b9ad-2332-4406-ba22-671a9c94e307",
                "e892bc52-1970-41d5-b4d0-aac65223f89f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e5e33088-1119-4bf8-959e-25b4161b1794",
          "title": "Course Controller Whitebox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
          "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Course Controller Whitebox Tests\"",
              "fullTitle": "Course Controller Whitebox Tests \"before each\" hook in \"Course Controller Whitebox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = {\n  params: {},\n  query: {},\n  body: {}\n};\nres = {\n  status: stub().returnsThis(),\n  json: stub()\n};",
              "err": {},
              "uuid": "b2b5bddc-250e-4ec2-81a7-6fca2e7f445a",
              "parentUUID": "e5e33088-1119-4bf8-959e-25b4161b1794",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Course Controller Whitebox Tests\"",
              "fullTitle": "Course Controller Whitebox Tests \"after each\" hook in \"Course Controller Whitebox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "a7b23fc1-22a8-4342-9bff-f7f122a3bc04",
              "parentUUID": "e5e33088-1119-4bf8-959e-25b4161b1794",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "0a6bd907-3598-4b99-b04d-b95de97db5da",
              "title": "getAllCourses",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return courses with status 200",
                  "fullTitle": "Course Controller Whitebox Tests getAllCourses should return courses with status 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyCourses = [{ course_id: 1, title: \"Test Course\" }];\nstub(CourseModel, \"getAll\").resolves(dummyCourses);\nreq.query = { keyword: \"Test\" };\nawait courseController.getAllCourses(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ data: dummyCourses })).to.be.true;",
                  "err": {},
                  "uuid": "8b46f17b-a313-4778-a05b-d1fff46126e2",
                  "parentUUID": "0a6bd907-3598-4b99-b04d-b95de97db5da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests getAllCourses should return 500 on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"getAll\").rejects(new Error(\"DB error\"));\nawait courseController.getAllCourses(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "38be6984-6e0c-4472-8558-6d1a65262061",
                  "parentUUID": "0a6bd907-3598-4b99-b04d-b95de97db5da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b46f17b-a313-4778-a05b-d1fff46126e2",
                "38be6984-6e0c-4472-8558-6d1a65262061"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa71b2b6-4519-48d7-b228-5c177d532282",
              "title": "getCourseById",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return course data if found",
                  "fullTitle": "Course Controller Whitebox Tests getCourseById should return course data if found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyCourse = { course_id: 1, title: \"Test Course\" };\nreq.params.id = \"1\";\nstub(CourseModel, \"getById\").resolves(dummyCourse);\nawait courseController.getCourseById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ courseData: dummyCourse })).to.be.true;",
                  "err": {},
                  "uuid": "4754f605-b443-4bba-85e0-e96023149f3d",
                  "parentUUID": "aa71b2b6-4519-48d7-b228-5c177d532282",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if course not found",
                  "fullTitle": "Course Controller Whitebox Tests getCourseById should return 404 if course not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nstub(CourseModel, \"getById\").resolves(null);\nawait courseController.getCourseById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ error: \"Course not found\" })).to.be.true;",
                  "err": {},
                  "uuid": "e164f0ca-a8d1-4986-bcb8-a90e8d681273",
                  "parentUUID": "aa71b2b6-4519-48d7-b228-5c177d532282",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests getCourseById should return 500 on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nstub(CourseModel, \"getById\").rejects(new Error(\"DB error\"));\nawait courseController.getCourseById(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "2822257e-2fa0-48b2-8c6d-24f5b4c81b22",
                  "parentUUID": "aa71b2b6-4519-48d7-b228-5c177d532282",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4754f605-b443-4bba-85e0-e96023149f3d",
                "e164f0ca-a8d1-4986-bcb8-a90e8d681273",
                "2822257e-2fa0-48b2-8c6d-24f5b4c81b22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b07e9a2c-ab1d-4a35-9e62-8f813dc732de",
              "title": "createCourse",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a course and return 201",
                  "fullTitle": "Course Controller Whitebox Tests createCourse should create a course and return 201",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newCourse = { course_id: 101 };\nstub(CourseModel, \"create\").resolves(newCourse);\nreq.body = { title: \"New Course\" };\nawait courseController.createCourse(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n  message: \"Course created successfully\",\n  data: { courseId: newCourse.course_id }\n})).to.be.true;",
                  "err": {},
                  "uuid": "2000e597-e24b-4800-ada2-ac91e8a5d27e",
                  "parentUUID": "b07e9a2c-ab1d-4a35-9e62-8f813dc732de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests createCourse should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"create\").rejects(new Error(\"DB error\"));\nreq.body = { title: \"New Course\" };\nawait courseController.createCourse(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "cbfe00ae-482d-4c97-aea4-75bf9932c00f",
                  "parentUUID": "b07e9a2c-ab1d-4a35-9e62-8f813dc732de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2000e597-e24b-4800-ada2-ac91e8a5d27e",
                "cbfe00ae-482d-4c97-aea4-75bf9932c00f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc4b9e07-b1e4-4691-a090-88a717bbaca4",
              "title": "updateCourse",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update course and return 200",
                  "fullTitle": "Course Controller Whitebox Tests updateCourse should update course and return 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nreq.body = { title: \"Updated Title\" };\nstub(CourseModel, \"update\").resolves();\nawait courseController.updateCourse(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Course updated successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "b097ba81-f042-4bec-903d-add65e850305",
                  "parentUUID": "bc4b9e07-b1e4-4691-a090-88a717bbaca4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests updateCourse should return 500 on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nreq.body = { title: \"Updated Title\" };\nstub(CourseModel, \"update\").rejects(new Error(\"DB error\"));\nawait courseController.updateCourse(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "ff29bd73-d3ce-4bac-95b4-9c89e890e278",
                  "parentUUID": "bc4b9e07-b1e4-4691-a090-88a717bbaca4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b097ba81-f042-4bec-903d-add65e850305",
                "ff29bd73-d3ce-4bac-95b4-9c89e890e278"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff3ff3ab-fe4c-4ef1-b6a8-be771ee5b8b0",
              "title": "deleteCourse",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 if creator_id is missing",
                  "fullTitle": "Course Controller Whitebox Tests deleteCourse should return 400 if creator_id is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nreq.query = {};\nawait courseController.deleteCourse(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ error: \"creator_id is required\" })).to.be.true;",
                  "err": {},
                  "uuid": "115e8779-5c23-4065-8a0f-3a6e4578afef",
                  "parentUUID": "ff3ff3ab-fe4c-4ef1-b6a8-be771ee5b8b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should delete course and return 200 if successful",
                  "fullTitle": "Course Controller Whitebox Tests deleteCourse should delete course and return 200 if successful",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nreq.query = { creator_id: \"10\" };\nstub(CourseModel, \"delete\").resolves(true);\nawait courseController.deleteCourse(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Course deleted successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "2b6e8c0b-992a-44fb-a335-efa82f534611",
                  "parentUUID": "ff3ff3ab-fe4c-4ef1-b6a8-be771ee5b8b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if course not found or unauthorized",
                  "fullTitle": "Course Controller Whitebox Tests deleteCourse should return 404 if course not found or unauthorized",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nreq.query = { creator_id: \"10\" };\nstub(CourseModel, \"delete\").resolves(false);\nawait courseController.deleteCourse(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({\n  error: \"Course not found or you are not authorized to delete it\"\n})).to.be.true;",
                  "err": {},
                  "uuid": "96323e5d-0bd8-4c18-a227-ec41c7ef091a",
                  "parentUUID": "ff3ff3ab-fe4c-4ef1-b6a8-be771ee5b8b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests deleteCourse should return 500 on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = \"1\";\nreq.query = { creator_id: \"10\" };\nstub(CourseModel, \"delete\").rejects(new Error(\"DB error\"));\nawait courseController.deleteCourse(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "c8d73f60-dcbe-412c-a785-b10db1554c54",
                  "parentUUID": "ff3ff3ab-fe4c-4ef1-b6a8-be771ee5b8b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "115e8779-5c23-4065-8a0f-3a6e4578afef",
                "2b6e8c0b-992a-44fb-a335-efa82f534611",
                "96323e5d-0bd8-4c18-a227-ec41c7ef091a",
                "c8d73f60-dcbe-412c-a785-b10db1554c54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d8c597a1-c313-464c-9961-5f79c9af7ac4",
              "title": "getProviderCourses",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return provider courses when creator_id is provided",
                  "fullTitle": "Course Controller Whitebox Tests getProviderCourses should return provider courses when creator_id is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyCourses = [{ course_id: 1, title: \"Provider Course\" }];\nreq.query = { id: 10 };\nstub(CourseModel, \"getProviderCourses\").resolves(dummyCourses);\nawait courseController.getProviderCourses(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ data: dummyCourses })).to.be.true;",
                  "err": {},
                  "uuid": "3c20ff3f-12c8-499b-aad8-02f78a9c7726",
                  "parentUUID": "d8c597a1-c313-464c-9961-5f79c9af7ac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if creator_id is missing",
                  "fullTitle": "Course Controller Whitebox Tests getProviderCourses should return 400 if creator_id is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = {};\nawait courseController.getProviderCourses(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ error: \"creator_id is required\" })).to.be.true;",
                  "err": {},
                  "uuid": "095bfb6e-170c-4d16-aeea-397475e9cfee",
                  "parentUUID": "d8c597a1-c313-464c-9961-5f79c9af7ac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests getProviderCourses should return 500 on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = { id: 10 };\nstub(CourseModel, \"getProviderCourses\").rejects(new Error(\"DB error\"));\nawait courseController.getProviderCourses(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "de966e4c-cc7a-439a-942a-00dcce83cbe7",
                  "parentUUID": "d8c597a1-c313-464c-9961-5f79c9af7ac4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c20ff3f-12c8-499b-aad8-02f78a9c7726",
                "095bfb6e-170c-4d16-aeea-397475e9cfee",
                "de966e4c-cc7a-439a-942a-00dcce83cbe7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5bb2b56f-ffc3-483d-901f-b31800bdd1d4",
              "title": "getEnrolledStudentsForCourse",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return enrolled students when courseId is provided",
                  "fullTitle": "Course Controller Whitebox Tests getEnrolledStudentsForCourse should return enrolled students when courseId is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyStudents = [{ student_id: 1, name: \"Student A\" }];\nreq.params = { courseId: \"1\" };\nreq.query = { courseId: \"1\" };\nstub(CourseModel, \"getEnrolledStudentsForCourse\").resolves(dummyStudents);\nawait courseController.getEnrolledStudentsForCourse(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ data: dummyStudents })).to.be.true;",
                  "err": {},
                  "uuid": "b6e93917-0bd7-4904-9c6a-75ba0f57a5a9",
                  "parentUUID": "5bb2b56f-ffc3-483d-901f-b31800bdd1d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if courseId is missing",
                  "fullTitle": "Course Controller Whitebox Tests getEnrolledStudentsForCourse should return 400 if courseId is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = {};\nawait courseController.getEnrolledStudentsForCourse(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ error: \"course_id is required\" })).to.be.true;",
                  "err": {},
                  "uuid": "813b7da8-6cba-4d18-b590-0949112636d8",
                  "parentUUID": "5bb2b56f-ffc3-483d-901f-b31800bdd1d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests getEnrolledStudentsForCourse should return 500 on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = { courseId: \"1\" };\nreq.query = { courseId: \"1\" };\nstub(CourseModel, \"getEnrolledStudentsForCourse\").rejects(new Error(\"DB error\"));\nawait courseController.getEnrolledStudentsForCourse(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "5695ac64-69a2-4429-ab17-80012e8794bf",
                  "parentUUID": "5bb2b56f-ffc3-483d-901f-b31800bdd1d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b6e93917-0bd7-4904-9c6a-75ba0f57a5a9",
                "813b7da8-6cba-4d18-b590-0949112636d8",
                "5695ac64-69a2-4429-ab17-80012e8794bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79051dfa-195d-472f-8578-250ebb456c7d",
              "title": "getEnrolledStudentsForProvider",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return enrolled students for provider when creator_id is provided",
                  "fullTitle": "Course Controller Whitebox Tests getEnrolledStudentsForProvider should return enrolled students for provider when creator_id is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyStudents = [{ student_id: 1, name: \"Student A\" }];\nreq.query = { creator_id: \"10\" };\nstub(CourseModel, \"getEnrolledStudentsForProvider\").resolves(dummyStudents);\nawait courseController.getEnrolledStudentsForProvider(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ data: dummyStudents })).to.be.true;",
                  "err": {},
                  "uuid": "9f14b127-e1dc-4f02-a58d-4ee81bc0ffb9",
                  "parentUUID": "79051dfa-195d-472f-8578-250ebb456c7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if creator_id is missing",
                  "fullTitle": "Course Controller Whitebox Tests getEnrolledStudentsForProvider should return 400 if creator_id is missing",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = {};\nawait courseController.getEnrolledStudentsForProvider(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ error: \"creator_id is required\" })).to.be.true;",
                  "err": {},
                  "uuid": "0bf43ac1-fb5f-450d-b1bb-3af934e279fe",
                  "parentUUID": "79051dfa-195d-472f-8578-250ebb456c7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests getEnrolledStudentsForProvider should return 500 on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = { creator_id: \"10\" };\nstub(CourseModel, \"getEnrolledStudentsForProvider\").rejects(new Error(\"DB error\"));\nawait courseController.getEnrolledStudentsForProvider(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "7c7372f6-eede-43ec-a19e-af7173b05ae2",
                  "parentUUID": "79051dfa-195d-472f-8578-250ebb456c7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f14b127-e1dc-4f02-a58d-4ee81bc0ffb9",
                "0bf43ac1-fb5f-450d-b1bb-3af934e279fe",
                "7c7372f6-eede-43ec-a19e-af7173b05ae2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c947ad3-e804-43f1-b16e-a576586921a4",
              "title": "addCourseModule",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add a course module and return 201",
                  "fullTitle": "Course Controller Whitebox Tests addCourseModule should add a course module and return 201",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyModule = { module_id: 555 };\nstub(CourseModel, \"addModule\").resolves(dummyModule);\nreq.body = { course_id: 1, title: \"New Module\" };\nawait courseController.addCourseModule(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n  message: \"Course module added successfully!\",\n  module_id: dummyModule.module_id\n})).to.be.true;",
                  "err": {},
                  "uuid": "06441c81-53c9-4ae9-bd5d-b219256e7536",
                  "parentUUID": "5c947ad3-e804-43f1-b16e-a576586921a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests addCourseModule should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModel, \"addModule\").rejects(new Error(\"DB error\"));\nreq.body = { course_id: 1, title: \"New Module\" };\nawait courseController.addCourseModule(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "d166fe8e-7569-44f1-86d7-9a88c3d03938",
                  "parentUUID": "5c947ad3-e804-43f1-b16e-a576586921a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06441c81-53c9-4ae9-bd5d-b219256e7536",
                "d166fe8e-7569-44f1-86d7-9a88c3d03938"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e999461e-d09e-46d9-9499-39a786fb90a5",
              "title": "getCourseModules",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return modules when course_id is provided",
                  "fullTitle": "Course Controller Whitebox Tests getCourseModules should return modules when course_id is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyModules = [{ module_id: 1, title: \"Module 1\" }];\nreq.query = { course_id: \"1\" };\nstub(CourseModel, \"getModules\").resolves(dummyModules);\nawait courseController.getCourseModules(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ data: dummyModules })).to.be.true;",
                  "err": {},
                  "uuid": "c8103c84-d304-420a-ab38-f0aae14df8a8",
                  "parentUUID": "e999461e-d09e-46d9-9499-39a786fb90a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if course_id is missing",
                  "fullTitle": "Course Controller Whitebox Tests getCourseModules should return 400 if course_id is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = {};\nawait courseController.getCourseModules(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ error: \"course_id is required\" })).to.be.true;",
                  "err": {},
                  "uuid": "d1f2e2f4-4975-49e5-b9ce-029d49a6f860",
                  "parentUUID": "e999461e-d09e-46d9-9499-39a786fb90a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests getCourseModules should return 500 on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.query = { course_id: \"1\" };\nstub(CourseModel, \"getModules\").rejects(new Error(\"DB error\"));\nawait courseController.getCourseModules(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "93f3eec3-894d-431b-a969-50c1c76c952b",
                  "parentUUID": "e999461e-d09e-46d9-9499-39a786fb90a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8103c84-d304-420a-ab38-f0aae14df8a8",
                "d1f2e2f4-4975-49e5-b9ce-029d49a6f860",
                "93f3eec3-894d-431b-a969-50c1c76c952b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "273d9898-33a0-400d-9927-761ec6491234",
              "title": "updateCourseModule",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a module and return 200 if successful",
                  "fullTitle": "Course Controller Whitebox Tests updateCourseModule should update a module and return 200 if successful",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = { module_id: \"123\" };\nreq.body = { title: \"Updated Module\" };\nstub(CourseModel, \"updateModule\").resolves(true);\nawait courseController.updateCourseModule(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Module updated successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "fbf599a3-5797-4a54-97f2-148fb963681b",
                  "parentUUID": "273d9898-33a0-400d-9927-761ec6491234",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if module not found or not updated",
                  "fullTitle": "Course Controller Whitebox Tests updateCourseModule should return 404 if module not found or not updated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = { module_id: \"123\" };\nreq.body = { title: \"Updated Module\" };\nstub(CourseModel, \"updateModule\").resolves(false);\nawait courseController.updateCourseModule(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ error: \"Module not found or not updated\" })).to.be.true;",
                  "err": {},
                  "uuid": "9480fbb3-f9e9-494a-a5ec-53074d573727",
                  "parentUUID": "273d9898-33a0-400d-9927-761ec6491234",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "Course Controller Whitebox Tests updateCourseModule should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = { module_id: \"123\" };\nreq.body = { title: \"Updated Module\" };\nstub(CourseModel, \"updateModule\").rejects(new Error(\"DB error\"));\nawait courseController.updateCourseModule(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "c2020fe9-5c25-48e9-a7ae-9c160f8b8cd9",
                  "parentUUID": "273d9898-33a0-400d-9927-761ec6491234",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbf599a3-5797-4a54-97f2-148fb963681b",
                "9480fbb3-f9e9-494a-a5ec-53074d573727",
                "c2020fe9-5c25-48e9-a7ae-9c160f8b8cd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f30a3196-bc37-462f-801e-ef6965f786e3",
          "title": "CourseEnrollmentController Whitebox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
          "file": "\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CourseEnrollmentController Whitebox Tests\"",
              "fullTitle": "CourseEnrollmentController Whitebox Tests \"before each\" hook in \"CourseEnrollmentController Whitebox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = {\n  params: {},\n  query: {},\n  body: {}\n};\nres = {\n  status: stub().returnsThis(),\n  json: stub()\n};",
              "err": {},
              "uuid": "3f16cb83-0854-4e31-ab87-f497bb63c5c1",
              "parentUUID": "f30a3196-bc37-462f-801e-ef6965f786e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"CourseEnrollmentController Whitebox Tests\"",
              "fullTitle": "CourseEnrollmentController Whitebox Tests \"after each\" hook in \"CourseEnrollmentController Whitebox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "dd3059e5-fb28-4a89-a048-fc19f01d6353",
              "parentUUID": "f30a3196-bc37-462f-801e-ef6965f786e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1f2e4652-6f3c-489f-82b5-711d05ddda38",
              "title": "getAllEnrollments",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all enrollments with status 200",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests getAllEnrollments should return all enrollments with status 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyEnrollments = [{ enrollment_id: 1, userId: 10 }];\nstub(EnrollmentModel, \"getAll\").resolves(dummyEnrollments);\nawait courseEnrollmentController.getAllEnrollments(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(dummyEnrollments)).to.be.true;",
                  "err": {},
                  "uuid": "a32ef254-f2b1-4cd3-b763-7026b29cb321",
                  "parentUUID": "1f2e4652-6f3c-489f-82b5-711d05ddda38",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests getAllEnrollments should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"getAll\").rejects(new Error(\"DB error\"));\nawait courseEnrollmentController.getAllEnrollments(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "7be07306-bb8c-4fd2-ad55-b3a49e3841f8",
                  "parentUUID": "1f2e4652-6f3c-489f-82b5-711d05ddda38",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a32ef254-f2b1-4cd3-b763-7026b29cb321",
                "7be07306-bb8c-4fd2-ad55-b3a49e3841f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8a14f89-59fa-4712-bfc3-e1933164e723",
              "title": "getEnrollmentById",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return enrollment data if found",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests getEnrollmentById should return enrollment data if found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyEnrollment = { enrollment_id: 1, userId: 10 };\nreq.params.enrollmentId = \"1\";\nstub(EnrollmentModel, \"getById\").resolves(dummyEnrollment);\nawait courseEnrollmentController.getEnrollmentById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(dummyEnrollment)).to.be.true;",
                  "err": {},
                  "uuid": "f0daf38b-9dca-4134-9cd9-435b67367ce4",
                  "parentUUID": "a8a14f89-59fa-4712-bfc3-e1933164e723",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if enrollment not found",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests getEnrollmentById should return 404 if enrollment not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.enrollmentId = \"1\";\nstub(EnrollmentModel, \"getById\").resolves(null);\nawait courseEnrollmentController.getEnrollmentById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ error: \"Enrollment not found\" })).to.be.true;",
                  "err": {},
                  "uuid": "855d2663-3a8c-4631-a037-dc6b55876068",
                  "parentUUID": "a8a14f89-59fa-4712-bfc3-e1933164e723",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests getEnrollmentById should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.enrollmentId = \"1\";\nstub(EnrollmentModel, \"getById\").rejects(new Error(\"DB error\"));\nawait courseEnrollmentController.getEnrollmentById(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "bed79e4b-d31a-4020-b81f-634198e92c93",
                  "parentUUID": "a8a14f89-59fa-4712-bfc3-e1933164e723",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0daf38b-9dca-4134-9cd9-435b67367ce4",
                "855d2663-3a8c-4631-a037-dc6b55876068",
                "bed79e4b-d31a-4020-b81f-634198e92c93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "185292ff-ee56-4908-aeb4-494273620ffc",
              "title": "checkUserEnrollment",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return enrollment status",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests checkUserEnrollment should return enrollment status",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.courseId = \"123\";\nreq.query.userId = \"10\";\nstub(EnrollmentModel, \"checkUserEnrollment\").resolves(true);\nawait courseEnrollmentController.checkUserEnrollment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ isEnrolled: true })).to.be.true;",
                  "err": {},
                  "uuid": "26b8a553-91da-457e-bd45-e245ced616ec",
                  "parentUUID": "185292ff-ee56-4908-aeb4-494273620ffc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests checkUserEnrollment should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.courseId = \"123\";\nreq.query.userId = \"10\";\nstub(EnrollmentModel, \"checkUserEnrollment\").rejects(new Error(\"DB error\"));\nawait courseEnrollmentController.checkUserEnrollment(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "a5b74f28-ea51-4811-a90c-03646e20e256",
                  "parentUUID": "185292ff-ee56-4908-aeb4-494273620ffc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26b8a553-91da-457e-bd45-e245ced616ec",
                "a5b74f28-ea51-4811-a90c-03646e20e256"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73948e41-d908-425d-b074-155857d69052",
              "title": "createEnrollment",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create an enrollment and return 201",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests createEnrollment should create an enrollment and return 201",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyEnrollment = { enrollment_id: 50 };\nstub(EnrollmentModel, \"create\").resolves(dummyEnrollment);\nreq.body = { userId: 10, courseId: \"123\", status: \"active\" };\nawait courseEnrollmentController.createEnrollment(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n  message: \"Enrollment created successfully\",\n  enrollment_id: dummyEnrollment.enrollment_id\n})).to.be.true;",
                  "err": {},
                  "uuid": "4d1d7bb7-771f-4ec7-9d17-a15e7c8d6ff1",
                  "parentUUID": "73948e41-d908-425d-b074-155857d69052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests createEnrollment should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(EnrollmentModel, \"create\").rejects(new Error(\"DB error\"));\nreq.body = { userId: 10, courseId: \"123\", status: \"active\" };\nawait courseEnrollmentController.createEnrollment(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "c877d037-d2d3-4279-9963-a90a1b3cb512",
                  "parentUUID": "73948e41-d908-425d-b074-155857d69052",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d1d7bb7-771f-4ec7-9d17-a15e7c8d6ff1",
                "c877d037-d2d3-4279-9963-a90a1b3cb512"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f875de61-bd11-4130-8b06-04795d98ae33",
              "title": "updateEnrollment",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update an enrollment and return 200",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests updateEnrollment should update an enrollment and return 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.enrollmentId = \"1\";\nreq.body = { status: \"completed\" };\nstub(EnrollmentModel, \"update\").resolves();\nawait courseEnrollmentController.updateEnrollment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Enrollment updated successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "1239e4e5-7104-464a-a774-8fe3c45f9cc4",
                  "parentUUID": "f875de61-bd11-4130-8b06-04795d98ae33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests updateEnrollment should return 500 on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.enrollmentId = \"1\";\nreq.body = { status: \"completed\" };\nstub(EnrollmentModel, \"update\").rejects(new Error(\"DB error\"));\nawait courseEnrollmentController.updateEnrollment(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "a3a86740-cbfa-43af-bdf0-699da5f0d7f2",
                  "parentUUID": "f875de61-bd11-4130-8b06-04795d98ae33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1239e4e5-7104-464a-a774-8fe3c45f9cc4",
                "a3a86740-cbfa-43af-bdf0-699da5f0d7f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b8a53679-092a-44ed-b578-9ccc5dca104e",
              "title": "deleteEnrollment",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseEnrollmentController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete an enrollment and return 200",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests deleteEnrollment should delete an enrollment and return 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.enrollmentId = \"1\";\nstub(EnrollmentModel, \"delete\").resolves();\nawait courseEnrollmentController.deleteEnrollment(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Enrollment deleted successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "428e714b-54c8-4da6-a12c-5746211c8f1f",
                  "parentUUID": "b8a53679-092a-44ed-b578-9ccc5dca104e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseEnrollmentController Whitebox Tests deleteEnrollment should return 500 on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.enrollmentId = \"1\";\nstub(EnrollmentModel, \"delete\").rejects(new Error(\"DB error\"));\nawait courseEnrollmentController.deleteEnrollment(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "f347276b-3676-41ae-afea-e080b77f2b5b",
                  "parentUUID": "b8a53679-092a-44ed-b578-9ccc5dca104e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "428e714b-54c8-4da6-a12c-5746211c8f1f",
                "f347276b-3676-41ae-afea-e080b77f2b5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2ed928f9-6735-476d-90c4-618a84c39747",
          "title": "CourseModuleController Whitebox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
          "file": "\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CourseModuleController Whitebox Tests\"",
              "fullTitle": "CourseModuleController Whitebox Tests \"before each\" hook in \"CourseModuleController Whitebox Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = {\n  params: {},\n  body: {}\n};\nres = {\n  status: stub().returnsThis(),\n  json: stub()\n};",
              "err": {},
              "uuid": "fe66ebca-2990-499a-ae5f-601ab70d11cc",
              "parentUUID": "2ed928f9-6735-476d-90c4-618a84c39747",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"CourseModuleController Whitebox Tests\"",
              "fullTitle": "CourseModuleController Whitebox Tests \"after each\" hook in \"CourseModuleController Whitebox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "7accc63b-da21-4dd4-b827-5cabc185c386",
              "parentUUID": "2ed928f9-6735-476d-90c4-618a84c39747",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c7d4781f-6c33-41e6-943e-203a9849da29",
              "title": "getAllModulesForCourse",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all modules for a course with status 200",
                  "fullTitle": "CourseModuleController Whitebox Tests getAllModulesForCourse should return all modules for a course with status 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyModules = [{ module_id: 1, moduleName: \"Module 1\" }];\nstub(CourseModuleModel, \"getAllForCourse\").resolves(dummyModules);\nreq.params.courseId = \"100\";\nawait courseModuleController.getAllModulesForCourse(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(dummyModules)).to.be.true;",
                  "err": {},
                  "uuid": "7b10bb06-8e45-4fb1-8f00-f12fc36e143c",
                  "parentUUID": "c7d4781f-6c33-41e6-943e-203a9849da29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseModuleController Whitebox Tests getAllModulesForCourse should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModuleModel, \"getAllForCourse\").rejects(new Error(\"DB error\"));\nreq.params.courseId = \"100\";\nawait courseModuleController.getAllModulesForCourse(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "8333c76a-5f65-487f-ab3f-b7cb071e403a",
                  "parentUUID": "c7d4781f-6c33-41e6-943e-203a9849da29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b10bb06-8e45-4fb1-8f00-f12fc36e143c",
                "8333c76a-5f65-487f-ab3f-b7cb071e403a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "445cc4e0-1d2a-42c8-b96c-0313dfaf78f9",
              "title": "getModuleById",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return module data if found",
                  "fullTitle": "CourseModuleController Whitebox Tests getModuleById should return module data if found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyModule = { module_id: 55, moduleName: \"Module 55\" };\nreq.params = { courseId: \"100\", moduleId: \"55\" };\nstub(CourseModuleModel, \"getById\").resolves(dummyModule);\nawait courseModuleController.getModuleById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(dummyModule)).to.be.true;",
                  "err": {},
                  "uuid": "13639a4f-f41b-482a-85ae-f384db4b6f08",
                  "parentUUID": "445cc4e0-1d2a-42c8-b96c-0313dfaf78f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if module is not found",
                  "fullTitle": "CourseModuleController Whitebox Tests getModuleById should return 404 if module is not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = { courseId: \"100\", moduleId: \"999\" };\nstub(CourseModuleModel, \"getById\").resolves(null);\nawait courseModuleController.getModuleById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ error: \"Module not found\" })).to.be.true;",
                  "err": {},
                  "uuid": "50134e4a-5740-4300-8288-2555b1c785c3",
                  "parentUUID": "445cc4e0-1d2a-42c8-b96c-0313dfaf78f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseModuleController Whitebox Tests getModuleById should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = { courseId: \"100\", moduleId: \"55\" };\nstub(CourseModuleModel, \"getById\").rejects(new Error(\"DB error\"));\nawait courseModuleController.getModuleById(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "436cabfc-c87a-43f6-895d-a3b3ec7a0039",
                  "parentUUID": "445cc4e0-1d2a-42c8-b96c-0313dfaf78f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13639a4f-f41b-482a-85ae-f384db4b6f08",
                "50134e4a-5740-4300-8288-2555b1c785c3",
                "436cabfc-c87a-43f6-895d-a3b3ec7a0039"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37db894f-33af-4321-93cc-951ed99a89d3",
              "title": "createModule",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a module and return 201",
                  "fullTitle": "CourseModuleController Whitebox Tests createModule should create a module and return 201",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyModule = { module_id: 77 };\nstub(CourseModuleModel, \"create\").resolves(dummyModule);\nreq.params.courseId = \"100\";\nreq.body = { moduleName: \"New Module\", moduleContent: \"Content here\" };\nawait courseModuleController.createModule(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n  message: \"Module created successfully\",\n  moduleId: dummyModule.module_id\n})).to.be.true;",
                  "err": {},
                  "uuid": "e90228db-b91c-40e5-9809-185063d29ce9",
                  "parentUUID": "37db894f-33af-4321-93cc-951ed99a89d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseModuleController Whitebox Tests createModule should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseModuleModel, \"create\").rejects(new Error(\"DB error\"));\nreq.params.courseId = \"100\";\nreq.body = { moduleName: \"New Module\", moduleContent: \"Content here\" };\nawait courseModuleController.createModule(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "f2c48a28-84bf-4fee-89ab-a9fc23936153",
                  "parentUUID": "37db894f-33af-4321-93cc-951ed99a89d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e90228db-b91c-40e5-9809-185063d29ce9",
                "f2c48a28-84bf-4fee-89ab-a9fc23936153"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63b0c6eb-8f4c-49c9-9ad4-7674ac4d0e15",
              "title": "updateModule",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a module and return 200",
                  "fullTitle": "CourseModuleController Whitebox Tests updateModule should update a module and return 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = { courseId: \"100\", moduleId: \"77\" };\nreq.body = { moduleName: \"Updated Module\", moduleContent: \"Updated content\" };\nstub(CourseModuleModel, \"update\").resolves();\nawait courseModuleController.updateModule(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Module updated successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "30686619-014c-4e3a-b81f-038b92cba887",
                  "parentUUID": "63b0c6eb-8f4c-49c9-9ad4-7674ac4d0e15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseModuleController Whitebox Tests updateModule should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = { courseId: \"100\", moduleId: \"77\" };\nreq.body = { moduleName: \"Updated Module\", moduleContent: \"Updated content\" };\nstub(CourseModuleModel, \"update\").rejects(new Error(\"DB error\"));\nawait courseModuleController.updateModule(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "19e2be2f-414f-4ce1-bc3c-0754cfc7b673",
                  "parentUUID": "63b0c6eb-8f4c-49c9-9ad4-7674ac4d0e15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30686619-014c-4e3a-b81f-038b92cba887",
                "19e2be2f-414f-4ce1-bc3c-0754cfc7b673"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f611cd25-4a7f-4087-b465-d50a76afc0a7",
              "title": "deleteModule",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseModuleController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a module and return 200",
                  "fullTitle": "CourseModuleController Whitebox Tests deleteModule should delete a module and return 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = { courseId: \"100\", moduleId: \"77\" };\nstub(CourseModuleModel, \"delete\").resolves();\nawait courseModuleController.deleteModule(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Module deleted successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "eaeb5d53-e9cf-47f5-808f-a290ee9d5cbd",
                  "parentUUID": "f611cd25-4a7f-4087-b465-d50a76afc0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseModuleController Whitebox Tests deleteModule should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params = { courseId: \"100\", moduleId: \"77\" };\nstub(CourseModuleModel, \"delete\").rejects(new Error(\"DB error\"));\nawait courseModuleController.deleteModule(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "1f596595-9a8c-4268-a623-95295ca2f3e1",
                  "parentUUID": "f611cd25-4a7f-4087-b465-d50a76afc0a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eaeb5d53-e9cf-47f5-808f-a290ee9d5cbd",
                "1f596595-9a8c-4268-a623-95295ca2f3e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e3184330-9e2d-42b3-a6b6-9f2438f33db0",
          "title": "CourseReviewController Whitebox Tests",
          "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
          "file": "\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CourseReviewController Whitebox Tests\"",
              "fullTitle": "CourseReviewController Whitebox Tests \"before each\" hook in \"CourseReviewController Whitebox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = {\n  params: {},\n  query: {},\n  body: {}\n};\nres = {\n  status: stub().returnsThis(),\n  json: stub()\n};",
              "err": {},
              "uuid": "f1c82388-d7cf-41c1-b885-18e1a3726741",
              "parentUUID": "e3184330-9e2d-42b3-a6b6-9f2438f33db0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"CourseReviewController Whitebox Tests\"",
              "fullTitle": "CourseReviewController Whitebox Tests \"after each\" hook in \"CourseReviewController Whitebox Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "restore();",
              "err": {},
              "uuid": "a66e35eb-8337-49cd-b18c-df8f79358fc4",
              "parentUUID": "e3184330-9e2d-42b3-a6b6-9f2438f33db0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "bd3bc9a0-cd29-45da-ae9b-76739684044b",
              "title": "getAllReviewsForCourse",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return reviews for a course with status 200",
                  "fullTitle": "CourseReviewController Whitebox Tests getAllReviewsForCourse should return reviews for a course with status 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyReviews = [{ review_id: 1, rating: 5 }];\nstub(CourseReviewModel, \"getReviews\").resolves(dummyReviews);\nreq.params.courseId = \"100\";\nreq.query.externalReferenceNumber = \"ext-123\";\nawait courseReviewController.getAllReviewsForCourse(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(dummyReviews)).to.be.true;",
                  "err": {},
                  "uuid": "c2b59386-c419-4a1c-aef1-3c7494d19e6f",
                  "parentUUID": "bd3bc9a0-cd29-45da-ae9b-76739684044b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseReviewController Whitebox Tests getAllReviewsForCourse should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseReviewModel, \"getReviews\").rejects(new Error(\"DB error\"));\nreq.params.courseId = \"100\";\nreq.query.externalReferenceNumber = \"ext-123\";\nawait courseReviewController.getAllReviewsForCourse(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "cae4d5a6-513e-4520-bddd-c48619159da4",
                  "parentUUID": "bd3bc9a0-cd29-45da-ae9b-76739684044b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2b59386-c419-4a1c-aef1-3c7494d19e6f",
                "cae4d5a6-513e-4520-bddd-c48619159da4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b969eede-6bcb-49bb-a932-d82a54841a5a",
              "title": "getReviewById",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return review data if found",
                  "fullTitle": "CourseReviewController Whitebox Tests getReviewById should return review data if found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyReview = { review_id: 1, rating: 5, comment: \"Excellent\" };\nreq.params.reviewId = \"1\";\nstub(CourseReviewModel, \"getById\").resolves(dummyReview);\nawait courseReviewController.getReviewById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(dummyReview)).to.be.true;",
                  "err": {},
                  "uuid": "bab938a2-cc22-48be-b0fd-3485b6987d47",
                  "parentUUID": "b969eede-6bcb-49bb-a932-d82a54841a5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if review not found",
                  "fullTitle": "CourseReviewController Whitebox Tests getReviewById should return 404 if review not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.reviewId = \"1\";\nstub(CourseReviewModel, \"getById\").resolves(null);\nawait courseReviewController.getReviewById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ error: \"Review not found\" })).to.be.true;",
                  "err": {},
                  "uuid": "7ecbbd04-eaa6-45e6-a287-e8c7924cd82e",
                  "parentUUID": "b969eede-6bcb-49bb-a932-d82a54841a5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseReviewController Whitebox Tests getReviewById should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.reviewId = \"1\";\nstub(CourseReviewModel, \"getById\").rejects(new Error(\"DB error\"));\nawait courseReviewController.getReviewById(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "f40fee33-afb4-48cd-81ae-809336f5d4f2",
                  "parentUUID": "b969eede-6bcb-49bb-a932-d82a54841a5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bab938a2-cc22-48be-b0fd-3485b6987d47",
                "7ecbbd04-eaa6-45e6-a287-e8c7924cd82e",
                "f40fee33-afb4-48cd-81ae-809336f5d4f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6676fadb-51c8-4aab-9897-5b40de61ecd7",
              "title": "createReview",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a review and return 201",
                  "fullTitle": "CourseReviewController Whitebox Tests createReview should create a review and return 201",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dummyResult = { reviewId: 10 };\nstub(CourseReviewModel, \"createReview\").resolves(dummyResult);\nreq.params.courseId = \"100\";\nreq.body = {\n  rating: 5,\n  comment: \"Great course\",\n  userId: 20,\n  externalReferenceNumber: \"ext-456\"\n};\nawait courseReviewController.createReview(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n  message: \"Review created successfully\",\n  reviewId: dummyResult.reviewId\n})).to.be.true;",
                  "err": {},
                  "uuid": "59ef3fdf-f26f-4022-bbce-a31d581caea5",
                  "parentUUID": "6676fadb-51c8-4aab-9897-5b40de61ecd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseReviewController Whitebox Tests createReview should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub(CourseReviewModel, \"createReview\").rejects(new Error(\"DB error\"));\nreq.params.courseId = \"100\";\nreq.body = {\n  rating: 5,\n  comment: \"Great course\",\n  userId: 20,\n  externalReferenceNumber: \"ext-456\"\n};\nawait courseReviewController.createReview(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "cc1cf5a9-b605-4034-bcfe-f581371cb232",
                  "parentUUID": "6676fadb-51c8-4aab-9897-5b40de61ecd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59ef3fdf-f26f-4022-bbce-a31d581caea5",
                "cc1cf5a9-b605-4034-bcfe-f581371cb232"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e3437da-f56f-4c40-9b61-4a4a2bfe1570",
              "title": "updateReview",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a review and return 200",
                  "fullTitle": "CourseReviewController Whitebox Tests updateReview should update a review and return 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.reviewId = \"1\";\nreq.body = { rating: 4, comment: \"Good course\" };\nstub(CourseReviewModel, \"updateReview\").resolves();\nawait courseReviewController.updateReview(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Review updated successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "913fca28-3d86-46fc-bdb6-ffcd4115fa6b",
                  "parentUUID": "3e3437da-f56f-4c40-9b61-4a4a2bfe1570",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseReviewController Whitebox Tests updateReview should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.reviewId = \"1\";\nreq.body = { rating: 4, comment: \"Good course\" };\nstub(CourseReviewModel, \"updateReview\").rejects(new Error(\"DB error\"));\nawait courseReviewController.updateReview(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "af148516-1d2d-4ab9-a3db-9b1b2b5854ab",
                  "parentUUID": "3e3437da-f56f-4c40-9b61-4a4a2bfe1570",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "913fca28-3d86-46fc-bdb6-ffcd4115fa6b",
                "af148516-1d2d-4ab9-a3db-9b1b2b5854ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "310b7511-0c78-42a8-974b-55870dbd8e46",
              "title": "deleteReview",
              "fullFile": "C:\\Users\\deez nuts\\OneDrive\\Desktop\\VSCode MegaFolder\\Projects\\Nodejs\\SC2006 Project\\ecom_backend\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
              "file": "\\test\\unit\\controller\\CourseReviewController.whitebox.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a review and return 200",
                  "fullTitle": "CourseReviewController Whitebox Tests deleteReview should delete a review and return 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.reviewId = \"1\";\nstub(CourseReviewModel, \"deleteReview\").resolves();\nawait courseReviewController.deleteReview(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ message: \"Review deleted successfully\" })).to.be.true;",
                  "err": {},
                  "uuid": "86f6b035-afa4-4614-81ff-2b4939c9fa30",
                  "parentUUID": "310b7511-0c78-42a8-974b-55870dbd8e46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 on error",
                  "fullTitle": "CourseReviewController Whitebox Tests deleteReview should return 500 on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.reviewId = \"1\";\nstub(CourseReviewModel, \"deleteReview\").rejects(new Error(\"DB error\"));\nawait courseReviewController.deleteReview(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: \"Database query failed\" })).to.be.true;",
                  "err": {},
                  "uuid": "555b33ea-874e-4dbe-9900-a56f80102603",
                  "parentUUID": "310b7511-0c78-42a8-974b-55870dbd8e46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86f6b035-afa4-4614-81ff-2b4939c9fa30",
                "555b33ea-874e-4dbe-9900-a56f80102603"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "results",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": ".tmp",
        "reportFilename": "results",
        "quiet": "true"
      },
      "version": "6.2.0"
    }
  }
}